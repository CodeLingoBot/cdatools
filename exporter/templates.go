// Code generated by go-bindata.
// sources:
// exporter/templates/cat1/_address.xml
// exporter/templates/cat1/_author.xml
// exporter/templates/cat1/_id.xml
// exporter/templates/cat1/_measures.xml
// exporter/templates/cat1/_organization.xml
// exporter/templates/cat1/_providers.xml
// exporter/templates/cat1/_record_target.xml
// exporter/templates/cat1/_telecom.xml
// exporter/templates/cat1/cat1.xml
// DO NOT EDIT!

package exporter

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
)

// bindataRead reads the given file from disk. It returns an error on failure.
func bindataRead(path, name string) ([]byte, error) {
	buf, err := ioutil.ReadFile(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset %s at %s: %v", name, path, err)
	}
	return buf, err
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

// templatesCat1_addressXml reads file data from disk. It returns an error on failure.
func templatesCat1_addressXml() (*asset, error) {
	path := "/Users/mokeefe/go/src/github.com/projectcypress/cdatools/exporter/templates/cat1/_address.xml"
	name := "templates/cat1/_address.xml"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

<<<<<<< HEAD
	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}
=======
	info := bindataFileInfo{name: "templates/cat1/_address.xml", size: 256, mode: os.FileMode(420), modTime: time.Unix(1452025204, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCat1_authorXml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x52\x4d\x4b\xc4\x30\x10\xbd\xef\xaf\x18\x7b\x14\x9a\xe2\xbd\x16\x0a\x22\x0a\xbb\x2a\xb8\x17\x4f\x32\x6e\xa6\xdd\x40\x9b\x2c\x49\x5a\x3f\x4a\xff\xbb\x69\xd2\xed\x6e\xd7\x82\xb7\xcc\xbc\x37\x2f\x2f\xf3\x92\x5e\xc5\x31\xbc\x3e\xe4\xeb\x35\xec\xb1\x25\xb8\x61\xec\x1a\xb0\xb1\x7b\xa5\x19\x6c\xf2\x37\xf8\x20\xe0\xd4\x8a\x1d\x81\xd2\x70\x20\x6d\x94\x64\x10\xc7\xd9\x2a\x0d\xac\x6c\x05\x90\x5a\x51\x13\xb4\x58\x35\x74\x1b\x75\x1d\xdb\xba\xb2\xef\x23\x48\x3c\x88\xc6\x88\x52\x12\xcf\x27\x7e\xd7\x69\x94\x25\x01\x7b\xe4\xa6\xef\x5d\x63\x68\x59\xaa\x0f\x15\x5a\x82\xe8\x5d\x70\xf6\x55\x57\x11\x30\x0f\x76\x1d\x49\x3e\x9e\xc6\xb9\x9c\x73\x4d\xc6\xd0\xe2\x34\x06\xf0\x1f\x89\x2d\x55\xb4\x53\xf5\xa2\x82\x0d\xd8\x92\x82\x3f\x8a\x02\xd8\x4b\x58\xc5\xbd\xd0\xc6\x8e\x1a\xd3\x4b\x03\x96\xf9\xa6\x6b\x4b\xac\xe9\x58\xb8\xb2\x14\x2d\xc9\xcc\xad\x69\x2e\x91\x26\x01\x38\x11\x0b\xac\x45\xf5\x7d\xc6\x5c\x63\x20\x8e\xc0\x51\x3f\x39\x5d\x90\x26\x7f\x3d\x38\xeb\x95\x21\x18\x4c\xdf\xf9\x24\xd9\x46\x71\xaa\x2e\x4d\x87\x78\x84\x2c\x03\x69\xf2\x91\xd6\x28\x9b\x02\x77\xb6\xd1\xa4\xfd\xe4\xd3\x70\x9d\x73\x35\x57\x4b\x93\x65\xe2\xa4\x63\x54\x61\x3f\x51\xd3\xc5\xf8\x50\x0e\xd3\x33\x78\x05\xf3\xd7\x2c\x98\x9b\x25\x72\x16\x9e\xd2\x25\x4a\xf1\x83\x56\xb8\x8d\x85\x04\x9f\xcf\x5a\xfe\xd9\x97\xc2\xee\x37\x27\xc7\xef\xfc\x1b\x00\x00\xff\xff\x43\xb1\xa7\x90\x12\x03\x00\x00")
>>>>>>> Added provider template and supporting model. 

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesCat1_authorXml reads file data from disk. It returns an error on failure.
func templatesCat1_authorXml() (*asset, error) {
	path := "/Users/mokeefe/go/src/github.com/projectcypress/cdatools/exporter/templates/cat1/_author.xml"
	name := "templates/cat1/_author.xml"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

<<<<<<< HEAD
	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}
=======
	info := bindataFileInfo{name: "templates/cat1/_author.xml", size: 786, mode: os.FileMode(420), modTime: time.Unix(1452025204, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCat1_idXml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb2\xc9\x4c\x51\xa8\xae\xce\x4c\x53\xd0\x0b\xca\xcf\x2f\xa9\xad\x2d\x02\x92\xb6\x4a\xd5\xd5\x50\x2e\x90\x95\x9a\x97\x52\x5b\xab\x90\x5a\x51\x92\x9a\x57\x9c\x99\x9f\x07\x96\x74\x85\xf1\x80\x2a\x14\xf4\xed\xb8\x00\x01\x00\x00\xff\xff\xc7\x76\x77\x01\x46\x00\x00\x00")
>>>>>>> Added provider template and supporting model. 

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesCat1_idXml reads file data from disk. It returns an error on failure.
func templatesCat1_idXml() (*asset, error) {
	path := "/Users/mokeefe/go/src/github.com/projectcypress/cdatools/exporter/templates/cat1/_id.xml"
	name := "templates/cat1/_id.xml"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

<<<<<<< HEAD
	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
=======
	info := bindataFileInfo{name: "templates/cat1/_id.xml", size: 70, mode: os.FileMode(420), modTime: time.Unix(1452025204, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
>>>>>>> Added provider template and supporting model. 
}

// templatesCat1_measuresXml reads file data from disk. It returns an error on failure.
func templatesCat1_measuresXml() (*asset, error) {
	path := "/Users/mokeefe/go/src/github.com/projectcypress/cdatools/exporter/templates/cat1/_measures.xml"
	name := "templates/cat1/_measures.xml"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesCat1_organizationXml reads file data from disk. It returns an error on failure.
func templatesCat1_organizationXml() (*asset, error) {
	path := "/Users/mokeefe/go/src/github.com/projectcypress/cdatools/exporter/templates/cat1/_organization.xml"
	name := "templates/cat1/_organization.xml"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

<<<<<<< HEAD
	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}
=======
	info := bindataFileInfo{name: "templates/cat1/_organization.xml", size: 357, mode: os.FileMode(420), modTime: time.Unix(1452025204, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCat1_providersXml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x55\x4d\x6f\xda\x40\x10\xbd\xf3\x2b\xa6\x3e\x07\x1b\x03\x21\x39\xb8\x96\x2a\x87\x48\xb9\x10\x2b\xe5\xd2\xe3\xca\x3b\xc6\xab\x9a\x5d\xba\x5e\x93\xa6\x88\xff\xde\x59\x83\x13\x1b\x5c\x90\xa3\x22\x0e\xf6\xee\x7c\xbd\x37\xf3\xc6\x01\x57\x49\xb9\x46\x69\x98\x11\x4a\x3e\xa7\x60\xde\x36\x18\x29\x8e\x5f\x9d\x87\xe7\xc8\x09\x07\x00\x41\x81\x7a\x2b\x12\x9c\x6f\xc9\x0c\x92\x9c\x15\xc5\xc1\x20\x8e\xe2\x17\x27\x84\xe0\xcb\x70\x08\x09\xd3\x08\x1b\xad\xb6\xa2\xa0\x38\x30\x1c\x5a\xcf\xdd\x4e\xa4\xe0\xc6\xf6\x94\xa3\x8e\x51\xa7\x4a\xaf\x99\x4c\xb0\xd8\xef\xe9\xda\x1a\x68\x26\x57\xd8\x6d\x03\x47\x23\xaa\x00\xd3\x14\x13\x23\xb6\xb8\x14\x6b\x0c\x8f\xa7\x74\x9e\xab\x57\xd8\xb2\xbc\xa4\x62\x76\x3b\x43\x77\x4b\x15\x71\xf6\x68\x23\x18\x70\xbf\x1b\xa6\xcd\x03\x33\xb8\xdf\x3b\x5e\xc3\x2b\x13\xab\xec\x82\xdb\x5c\xf2\x53\xa7\xc0\xeb\xac\xa0\x42\xfe\x43\x95\x84\x5e\x82\x90\x49\x5e\x72\x84\x75\x99\x1b\xb1\xc9\x89\x8d\x03\x16\xd4\xc5\x0d\x20\x4b\x32\x78\x15\x26\x03\xb2\x5c\xc4\x4f\x37\xb0\x7c\x5a\xdc\x40\x14\x2d\xdc\x23\x57\x55\xbc\x77\x97\x46\x1b\xe2\x97\x47\xa7\x51\xbc\x69\x31\xf0\x59\x0e\x3e\xc5\x82\xe5\xa1\x9d\x3e\xa0\x59\x10\x2b\x89\x7c\x2e\x8d\x30\x6f\xcd\xf8\x67\xad\x75\xa3\x87\x6f\x4f\x9c\x46\x48\x70\x41\x9c\xbc\x37\xb7\x36\xa7\x51\x91\x64\xfe\xa2\x94\x01\x67\xec\xfa\x33\xf7\x7e\x3a\x72\x7d\xd7\xf7\x27\xf7\xf7\x13\x77\xea\x8e\x9d\x13\x1f\xca\x2f\x38\x68\x72\xb0\x08\x2a\x4f\x2a\x17\xf0\xb7\x41\x69\xa7\xb0\x3a\x9d\xd7\x6f\xf6\xaa\xc5\x80\x4d\x8a\x92\xb7\x82\x9e\x9f\x04\x1a\x37\x1a\x0b\xaa\x1b\xf9\xb3\x5e\x31\x29\xfe\x54\x52\x39\x8d\xd4\x0b\xed\x11\x2f\xfe\xea\x89\xb7\x89\xb8\xdb\xa5\x07\xfa\x2e\xb4\x9d\x0c\x78\x57\x29\x08\xbc\xee\x41\x08\xbc\xf7\x89\x0e\x07\xed\xe8\xf4\x94\x17\x58\x3d\x56\x32\x5a\xa8\xc3\xfa\x20\xee\x80\x33\xc3\x20\x55\xa5\xe4\xa4\x2a\x30\x19\x69\x89\x12\xda\xed\xa3\x31\x51\x9a\xd7\x79\x37\xa5\x31\x42\xae\xac\x11\xd9\xb3\x9f\xf8\x11\xe2\x20\xaa\xae\xc5\xd1\x14\xcc\x78\x34\x1a\x8f\xee\xfc\x59\x3d\xe3\x57\x44\x61\xdf\x17\xea\xb5\xd6\x44\xc7\x56\xf8\x9f\x1b\xe1\xca\x36\x68\x6d\x82\x4b\xa0\xfa\xc2\x6a\xcb\xfc\x1f\x12\xaf\x80\x2e\x33\x51\x00\xfd\xab\x0e\xd5\xcc\x13\x96\xe6\x4a\xbb\x38\xaf\xb3\xd6\xbc\xfa\xf5\xaf\x31\xaa\xd7\xe5\x77\x56\x89\x6a\x98\x59\x52\x1b\xd5\xf4\xd3\x8f\x3f\x9e\x4c\x6f\x67\x77\x2d\xe1\x5c\xce\x46\xdd\xeb\x91\x6d\x32\x69\xe3\xbf\x9d\x4e\xc6\x2d\xec\x97\x85\xd7\x25\xba\x13\xc1\x7d\xc8\x2d\xf0\x9a\x5f\xf1\x70\x10\x78\x27\x1f\xfe\x70\xf0\x37\x00\x00\xff\xff\x46\x95\x5a\x17\x0b\x08\x00\x00")

func templatesCat1_providersXmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesCat1_providersXml,
		"templates/cat1/_providers.xml",
	)
}

func templatesCat1_providersXml() (*asset, error) {
	bytes, err := templatesCat1_providersXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cat1/_providers.xml", size: 2059, mode: os.FileMode(420), modTime: time.Unix(1452096910, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCat1_record_targetXml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x56\x4d\x6f\xe2\x3c\x10\xbe\xf7\x57\x58\xb9\xbe\xaa\xf3\xd5\x96\xbc\xab\x14\x89\x66\xfb\x81\x44\xbb\x08\x58\xad\xb4\x37\x17\xbb\x60\x29\xb1\x91\xe3\x54\xed\x46\xfc\xf7\x1d\x27\x01\x9c\x26\x2c\x87\x55\xf7\xd2\xda\x33\x4f\x9e\x99\x67\x32\x33\x24\x56\x6c\x29\x15\x5d\x10\xb5\x62\x7a\x78\x86\x50\xbc\x21\x9a\x33\xa1\x67\x32\x65\xe6\x8e\x50\x59\xf2\x17\x84\x1f\x19\xe5\x4b\x92\xce\x2a\xf8\x53\x91\x3d\x33\xb5\xdd\x56\xfe\x5e\xc4\x28\xcf\xf9\x4a\x58\x18\x60\xe6\x14\xb1\x37\xcd\x44\xce\xa5\xb8\x76\xca\xb2\x9f\xd3\x41\x4a\x4a\xdd\xf5\x1f\x18\x1d\xe4\x0e\xf7\x91\x59\x9a\xb3\xe3\x41\xfc\x20\xbc\xb8\xdc\x31\x4e\x53\xb2\x64\x6b\x99\x52\xa6\xbe\xa9\x15\x11\xfc\x17\x48\x95\xa2\x4d\x27\x68\xc3\xf6\x81\xfa\x6f\x88\x6d\xda\x98\x50\xaa\x50\x91\xb3\x6b\xe7\x61\xea\x0c\x5b\x15\x1c\x81\x8b\xe5\x39\xcb\x2d\x41\x65\xa9\x88\x58\xb1\x7e\xa7\xe5\x9e\x6b\xc5\x98\x6e\xf9\x20\x58\x5e\x59\x9b\x47\x27\x5c\xb0\x21\x94\x75\xbb\x8d\xdd\xae\xa3\x45\x7a\xc8\xb7\x21\x5a\x72\xfd\x6e\x9e\x4d\xe0\xbf\x79\xbe\xba\x9f\xb5\x22\x11\x5d\xb1\xcf\xcd\xa1\x0e\x61\x2c\x36\x66\x23\xc1\x96\x26\x92\x56\xc0\x9f\x7c\x63\x60\x96\xb1\x15\x50\x16\x42\xab\x3a\x66\x7d\x44\x55\xdc\xc6\x7c\xd6\x9f\x6b\xb7\x1f\xba\x42\x03\x2f\x40\x37\x85\x4a\xb9\x58\x69\x29\xd0\x8c\xe2\x3f\x96\xa3\x96\x7e\xc3\xe8\x0b\x34\xe1\x47\xe1\x8d\xec\xc7\x51\x47\xae\x2d\xd6\xf3\x07\xa1\xd7\xaf\x74\xaf\xf3\xfb\xbc\x23\xae\xd5\x36\xae\xe9\x9b\xda\x13\x6b\x96\xc2\x48\x64\x75\x17\xfd\x98\x3a\xe8\x95\xa4\x05\x1c\xc1\xfe\xe5\x3f\xff\x7c\x10\xf9\xe7\xc1\xc0\x3f\x0f\x3d\xcf\x73\x9a\x16\xdc\x8d\xf5\x8e\x3b\x16\x24\xb3\xd3\x58\xf1\x57\x26\x4c\xb1\xef\xb8\xca\xb5\xa9\x74\x6d\x39\x20\x5e\x48\xc6\xd3\xea\x7d\x4c\x48\x8d\x68\x2c\x3b\x46\xd7\xa6\x84\x36\xcf\xb8\xe0\x50\x57\x88\xfb\xca\xee\x41\x09\x53\x46\x3a\x5a\xc2\x9f\x6a\xba\x6b\x9b\x19\x67\x63\x9a\xbf\xe7\x9a\x65\xd7\x4e\x80\xfd\x2b\x1c\x5d\x78\xd8\xc7\xbe\x1f\x46\x51\x88\x2f\xb1\x6f\x43\x9e\x20\x0a\xcc\xce\x64\x80\x46\x3d\x21\x9c\xfd\x2c\xc7\xcf\x5c\xe9\xf5\x82\x67\x6c\x57\x9e\xb2\xd4\x70\x5b\xc8\x84\x92\x3b\xa9\x32\xa2\x11\xbe\x31\x18\x5a\x35\xac\xe3\xb6\x87\x71\x06\x33\x6d\x37\x92\x82\x7b\x5b\x80\x41\x60\x63\x32\x1a\x0e\x0f\x61\x93\x21\x34\x2b\xe5\xf9\x26\x25\xef\x75\xbe\x3b\xb8\xb9\x01\xbc\x79\xb5\x1d\x59\xc9\xd7\x04\x19\x1c\x22\x82\xa2\x5b\xbd\x16\xdc\xf4\xdb\xa9\x0a\x5d\xe1\x20\x8c\x9c\xde\x2d\xb6\x53\xb3\xe7\x42\xb6\x26\x56\x59\xef\x95\x2c\x36\x6d\x69\x7b\xb8\xa5\x0f\xb5\x78\x8e\xa9\xec\x00\xfe\xbd\xd6\x09\x6c\xc4\x82\xac\xfa\xd7\x68\x9f\x13\x2a\x91\x36\xe6\x44\x66\x59\x01\x99\x54\x0b\x7c\xd8\x5e\xa6\x90\x11\x48\xd5\x6c\x4c\x9b\xbd\xdf\xcd\x2e\xc4\x51\x04\x67\x0c\xc7\xc0\x41\xa4\xfa\xc9\x82\x3d\x33\x2a\xf4\x5a\x2a\x50\xd7\x34\xef\x78\x31\x9f\xba\x49\x14\x1e\x74\x1c\x0b\xe1\x63\x23\xd9\xc7\x17\x26\xc6\xff\xe1\xc0\x9c\x2f\xc1\xe6\xe3\xc0\x8c\xc5\xb1\x08\xe3\x87\x5b\x77\x9a\x24\x1d\xfe\x83\x4c\xeb\x6d\x73\x18\x9c\x37\x54\xbd\xe9\x1c\x39\xe3\xdb\xc5\x9d\x83\x3c\x64\x4f\x44\x3d\xdf\x27\x6a\x74\x6a\x13\x9f\x2c\xf1\xa7\x17\xf8\x73\xcb\xdb\x57\x5c\x26\x6c\xcc\x89\x12\xb6\xf7\xbd\xb5\xb0\xf7\x97\xfa\xa3\x2c\x76\xdb\x1f\x6d\xbf\x03\x00\x00\xff\xff\x2c\x82\x07\x54\xc4\x09\x00\x00")
>>>>>>> Added provider template and supporting model. 

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesCat1_record_targetXml reads file data from disk. It returns an error on failure.
func templatesCat1_record_targetXml() (*asset, error) {
	path := "/Users/mokeefe/go/src/github.com/projectcypress/cdatools/exporter/templates/cat1/_record_target.xml"
	name := "templates/cat1/_record_target.xml"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

<<<<<<< HEAD
	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}
=======
	info := bindataFileInfo{name: "templates/cat1/_record_target.xml", size: 2500, mode: os.FileMode(420), modTime: time.Unix(1452025204, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCat1_telecomXml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb2\x29\x49\xcd\x49\x4d\xce\xcf\x55\x28\x2d\x4e\xb5\x55\xaa\xae\xd6\x0b\x2d\x4e\xad\xad\x55\x52\x28\x4b\xcc\x29\x05\x0a\x00\x65\xad\xb4\x81\xa2\x61\x20\x2e\x48\x5c\xdf\x8e\x0b\x10\x00\x00\xff\xff\x58\x0a\x19\xbe\x33\x00\x00\x00")
>>>>>>> Added provider template and supporting model. 

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesCat1_telecomXml reads file data from disk. It returns an error on failure.
func templatesCat1_telecomXml() (*asset, error) {
	path := "/Users/mokeefe/go/src/github.com/projectcypress/cdatools/exporter/templates/cat1/_telecom.xml"
	name := "templates/cat1/_telecom.xml"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

<<<<<<< HEAD
	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}
=======
	info := bindataFileInfo{name: "templates/cat1/_telecom.xml", size: 51, mode: os.FileMode(420), modTime: time.Unix(1452025204, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCat1Cat1Xml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x58\x59\x73\xe2\x46\x10\x7e\xf7\xaf\x98\xe8\x29\x49\x15\x12\x97\x6d\xd6\x25\xb3\xc5\x02\x1b\x53\x65\x30\x0b\x38\xc7\xd3\xd6\x58\x6a\x60\x6a\xa5\x11\x91\x46\x60\xe2\xf2\x7f\x4f\xcf\xe8\x1a\x89\xc3\x4e\xb2\x8f\x49\xb9\x2a\x4a\x4f\x4f\x5f\xdf\xd7\xdd\x43\xec\x8f\xcf\xbe\x47\xb6\x10\x46\x2c\xe0\xb7\x46\xc3\xac\x1b\x04\xb8\x13\xb8\x8c\xaf\x6e\x8d\x58\x2c\x6b\x1d\xe3\x63\xf7\xc2\xee\x7b\x8c\x33\x87\x7a\x83\xc0\x89\x7d\xe0\x82\xe0\x35\x1e\xdd\x3c\x47\xec\xd6\x58\x0b\xb1\xb9\xb1\xac\xdd\x6e\x67\xee\x5a\x66\x10\xae\xac\x66\xbd\xde\xb0\x7e\x1f\xdf\xcf\x9d\x35\xf8\xb4\xc6\x78\x24\x28\x77\xc0\xb8\x48\xae\xa1\xe1\x90\xdf\xac\xbd\xeb\x1a\x2a\xdf\x6c\x5b\x99\xfc\x66\x1b\x38\xd5\x33\x0b\x65\xf9\x79\xe4\x8a\x8a\x82\x94\x18\xdd\x0b\x42\xec\x1f\x6a\x35\xf2\x65\x36\xe8\x91\x3b\xa0\x2e\x84\xa4\x56\x53\xe2\x10\xa8\xe7\xf7\x03\x17\x08\x26\x05\xb7\xc6\xe3\xdc\xb0\xd4\x81\xd8\x6f\x60\xe4\x92\x30\x08\xc4\xad\xd1\x34\x1b\x57\x66\xa7\x5d\x37\x1b\x66\xa3\xd1\xea\x74\x5a\xf8\xd1\xc2\x4a\x3c\x0b\xe0\x49\x65\xa6\x0f\xfd\xc1\xd7\xbb\x41\x1d\xff\x69\xd7\x53\x13\xd2\xe5\xe3\x9c\xcc\xa4\x8b\xcc\xed\x02\xfc\x8d\x47\x05\x10\xb4\x9d\x86\x20\x52\xd1\x39\x6f\x75\xb3\x89\x7f\x4d\x29\xd1\x8c\xab\x7c\xb4\xeb\xff\xd8\x60\x5b\x19\x24\x9a\xc5\xc1\xb8\xf6\x44\x23\x70\xbf\x8f\xed\xa6\x6e\x7b\xb1\x66\x11\xc1\x3f\xb1\x06\xb2\xf2\x82\x27\xea\x79\x7b\x12\x73\xf6\x67\x0c\x84\xb9\x48\x1a\xb6\x64\x58\xa1\x65\x10\xa2\x0a\xea\xa9\x08\xdc\x8c\x50\xa9\x7f\x96\xf9\x7d\x79\x21\x1c\x76\x33\xca\xdd\xc0\x27\xaf\xaf\xd5\xaa\xe4\xf7\x24\x8e\x0a\xdb\xcc\x82\x53\x80\x7d\x79\xd9\xe8\x34\x6b\x48\x69\xf9\x9f\xf3\x7d\x84\xc9\x1d\x4b\xe8\x4a\xd6\xa8\x50\x99\x50\x1f\xef\xde\x3f\x8c\x26\x7d\x83\xb8\x2c\xc2\x7a\xec\x13\xd9\x97\x98\x7a\x4c\xec\xc9\x18\x68\x14\x87\x80\xc8\x6f\x82\x50\x64\x84\x62\xc2\x83\xae\x0a\x6e\xc4\x1d\x99\xb0\x93\x69\xd8\x56\x72\x78\xac\x52\x79\x22\x0e\x52\x55\x20\xd7\x88\x60\x7e\x9e\x0c\x2c\x97\xe0\x08\xb6\x85\x85\x14\x6e\xa9\x17\x83\x2a\x8d\xd4\x99\x04\xbb\xa2\x30\x4e\xc0\x97\x49\x91\x55\x88\x1a\xe3\x27\x6f\xa5\x7f\x69\x36\x2f\x53\x2b\x1e\xe5\xab\x98\xae\x40\xbb\x0e\x5c\x2b\x7d\xa8\xd2\x41\xf6\x6c\x30\xd4\x02\x35\x42\x5e\x5e\x32\xe2\x10\xe3\x6b\x08\x4e\x10\xba\x5f\x05\x0d\x57\x20\x4c\x6c\x5d\x83\x98\x33\x25\x7b\x7d\xbd\x48\xd5\xd9\x92\x98\x49\xcb\xa0\x2c\x11\x85\xe8\x1c\x32\xa9\xd9\x8b\xc5\x3a\x08\xa3\xf4\xb4\xe2\x81\xaa\xc3\xd4\x74\x6e\x00\xb8\x9b\x7e\xab\x60\xe7\x77\xbd\xfb\x7b\xb2\xa6\x5b\x20\x0d\xd3\xfc\x99\xa4\x97\xc8\xb8\xf7\x07\x79\xc2\xc2\xc3\x96\x21\x42\xc8\xc6\x0d\x8e\xbf\x80\x9b\xa9\xa3\x05\x82\x92\xa8\x92\x60\xa9\x20\xea\xeb\x7c\x63\x3c\x61\x2f\x3c\x53\x0c\x07\x24\x8c\x34\xb3\x45\x85\xfc\xa6\x82\x92\x28\x7e\xf2\x59\x24\x47\x07\x0e\x57\xa4\x70\x68\x85\xb0\x62\x91\x08\xf7\xa6\xaa\x59\x11\xa5\x74\xe7\xc4\x91\xc0\x91\x4b\xf9\x71\x8f\x09\x51\x22\xa4\x20\xa1\xc9\xb7\x07\x2b\xea\xa9\x28\x25\xe2\x0e\x15\x18\x6c\x1a\x98\xb2\x9c\x05\x87\xdd\x23\x31\x0b\x21\x42\xbd\xe4\x6a\x02\x21\x8e\x77\xcc\x7c\x45\x39\xfb\x4b\x91\xce\xcc\x91\xd4\x4a\x97\x8b\xf2\xf8\xba\x69\x8d\x6c\x8a\xb9\xad\x38\xb8\xfd\xea\x49\x05\xa8\x92\x8f\x04\xae\x14\xdf\xfc\xa6\xf9\xa0\xe9\xe4\x70\xdb\xd6\x09\x17\xb6\xa5\x45\x53\x2e\xe3\xb1\xaa\x9c\x28\x28\x22\x84\x25\xc0\x0a\x25\xd8\x93\xdd\x3a\x50\x62\x21\xb5\xd3\x10\x54\xc1\xf5\x04\xb2\xea\x17\x70\x55\xc8\x60\x26\x9d\x0d\x1e\x28\x3f\x3e\xea\x49\xa6\xa5\xf5\x3f\x5f\x63\x15\x7c\x4f\x8f\x3d\x2f\xf6\xa1\xb6\x1a\x37\xfa\x40\xd0\xbb\x26\x37\x60\xca\xa1\x91\x4d\x88\xd3\x96\x64\x99\xa9\xc0\x79\xa6\x75\xfd\x5c\xbb\x94\x01\x31\x44\xbb\x62\x5f\x00\xad\x59\x1b\x0d\x34\x83\xc7\x7b\xb9\x88\x6a\xe4\x16\x5d\x7d\x40\x18\xe6\x96\xbb\xba\xda\xd9\x6f\x9b\xef\xb9\x2e\xd6\x3b\x82\x33\x4e\x68\xa2\xf2\x5f\x3d\x2d\x10\x68\x27\xf0\xcf\x38\x12\x89\xc6\xdb\x8e\xf2\x22\x4f\x15\x1f\xbb\x9a\x41\x9b\x23\x0f\x75\x81\x94\xad\x70\x25\xf0\xee\x29\xdc\x13\x23\xe6\x67\x16\x46\xe2\xf5\xd5\xb6\x12\xed\x8a\x89\x25\xf5\x99\xb7\x7f\xcb\xc6\x3d\x4d\x4c\xa4\xda\x7a\x5c\x56\x29\xb0\xa2\x61\xab\x29\xbc\x73\x20\x94\xdd\xbf\x31\x14\x74\x2e\xda\xd6\xb1\xde\xb9\x90\x8e\xb1\x15\x23\x20\xd9\x52\x48\xa6\x7a\x7a\x49\x9c\x5f\xa8\x1a\x24\x3d\xed\x5a\xca\x7a\x7c\xa5\x68\x6f\xc3\xfe\x5e\x76\x78\x64\x9c\x7e\x31\x7d\x30\x71\xc3\xea\x3d\x27\x8d\x4c\xa6\x23\x5d\x54\xb6\xf9\x99\x7e\x03\x54\x38\x6d\xb3\x6d\x5e\xe9\x3d\x8a\x8c\xd6\x3a\x13\x17\x0d\x80\x48\x3b\xe1\x9e\x71\xe8\x36\xeb\x4d\xf2\x29\x0e\xf1\x19\xbf\x12\x38\xc9\x66\xae\x69\x5b\x87\x5a\x85\x05\x47\x96\xf7\x13\xb8\xf8\x5a\x73\x71\xe4\x96\x1b\x1f\x9f\xf3\x02\xba\xe3\x9e\x34\x21\xbf\x8a\x93\x4d\x80\x12\x4f\x0e\x92\x6e\xbd\x71\xdd\xaa\xdb\x96\x26\xd1\xac\x07\x31\xc7\x5d\xd8\x7d\x9c\xa3\xed\xf4\xbb\xc0\x58\xcb\xc5\x4e\x3b\x88\xc4\x11\xe2\xf4\xdb\xd4\xc8\x20\x43\xf9\xcd\x8f\xd7\x9d\xc6\x4f\xcd\xeb\x46\xad\x85\xaf\xf2\x23\x03\x2b\x01\x0e\x33\x1e\xa8\xf5\xac\xf9\xf7\x29\x8f\x97\xd4\x91\x43\x2f\x1c\x63\x68\x9e\x7c\xdf\x75\x53\x1c\x6d\xeb\xe8\x31\xd1\x0b\x10\x2c\xc5\x8e\x86\x50\xbe\xa6\x4b\x49\xf7\x80\xb3\x95\x70\x48\xc6\xde\x43\x9e\xa1\xac\xf8\xae\x2c\xdf\xd3\xab\xd7\xce\x37\xbd\x76\xa8\xf7\x91\x96\x00\x3b\xf3\xbc\x57\x64\xd5\x74\xb9\x96\x24\xfe\xbe\xc1\x9d\x36\x00\xe7\x5b\xa5\xfd\xff\x15\x52\x07\xc4\xfd\x1e\xd4\x7d\x83\xbc\xe7\xe8\xfb\x6e\x02\x9f\xa7\xf0\x01\x89\xad\xf7\x21\x73\xe2\xcd\x53\x7a\xf1\x9c\x79\x29\xbc\x63\xa4\x9d\x5d\xf5\x27\x16\x7d\xc1\x95\x27\xa7\xde\xa0\x97\x2e\xa2\x48\x5b\xed\x5a\xbb\xd9\xb9\xaa\x75\x9a\x8e\x53\x6b\xb7\xe0\xa9\xde\x76\x3e\x5c\x37\xe9\xf5\xff\x33\xe9\xfc\x4c\xaa\x2e\xc7\xc3\xed\x9e\xee\xf6\x3b\xe0\xe1\xfe\xd8\xea\xce\x16\xf7\x1c\xf0\xe4\x70\x31\x97\xfa\xf2\xd4\x52\xd6\x47\xc5\x77\x9e\x10\xe5\xb9\x50\xa2\xfe\x39\xc6\x17\x9c\x3b\xbe\xce\x8b\x27\x53\xf6\x5b\x74\x3a\x7b\xf8\x75\x34\x18\xce\xe6\x64\x36\x9c\xe0\xbf\xc9\xdd\x70\x36\x4c\x17\x6a\xe9\xc9\xb1\x09\x83\x2d\xfe\x34\x0e\xa3\xea\x4f\x51\x05\xba\xbf\x09\x38\xfa\xc9\x1a\x44\x84\xb1\x9a\xfb\xee\xa7\xc0\xdd\xeb\xeb\x7a\x3c\xec\xcd\x1f\x67\xc3\x92\xb7\xf2\x42\x9f\x0d\xa7\x0f\xb3\xc5\x68\xf2\x0b\x99\xf6\x66\xbd\xf1\x19\xcd\x69\x6f\x31\x1a\x4e\x16\x64\xd0\x5b\xf4\x52\xad\x79\x49\x4d\xf5\x41\x25\x10\xc9\xca\x3c\xd8\x0b\xdb\xaa\xfe\x2f\xb9\xee\xc5\xdf\x01\x00\x00\xff\xff\xa6\x4a\xcf\xcb\xcd\x13\x00\x00")
>>>>>>> Added provider template and supporting model. 

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesCat1Cat1Xml reads file data from disk. It returns an error on failure.
func templatesCat1Cat1Xml() (*asset, error) {
	path := "/Users/mokeefe/go/src/github.com/projectcypress/cdatools/exporter/templates/cat1/cat1.xml"
	name := "templates/cat1/cat1.xml"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

<<<<<<< HEAD
	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
=======
	info := bindataFileInfo{name: "templates/cat1/cat1.xml", size: 5069, mode: os.FileMode(420), modTime: time.Unix(1452088489, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
>>>>>>> Added provider template and supporting model. 
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/cat1/_address.xml": templatesCat1_addressXml,
	"templates/cat1/_author.xml": templatesCat1_authorXml,
	"templates/cat1/_id.xml": templatesCat1_idXml,
	"templates/cat1/_measures.xml": templatesCat1_measuresXml,
	"templates/cat1/_organization.xml": templatesCat1_organizationXml,
	"templates/cat1/_providers.xml": templatesCat1_providersXml,
	"templates/cat1/_record_target.xml": templatesCat1_record_targetXml,
	"templates/cat1/_telecom.xml": templatesCat1_telecomXml,
	"templates/cat1/cat1.xml": templatesCat1Cat1Xml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"cat1": &bintree{nil, map[string]*bintree{
			"_address.xml": &bintree{templatesCat1_addressXml, map[string]*bintree{}},
			"_author.xml": &bintree{templatesCat1_authorXml, map[string]*bintree{}},
			"_id.xml": &bintree{templatesCat1_idXml, map[string]*bintree{}},
			"_measures.xml": &bintree{templatesCat1_measuresXml, map[string]*bintree{}},
			"_organization.xml": &bintree{templatesCat1_organizationXml, map[string]*bintree{}},
			"_providers.xml": &bintree{templatesCat1_providersXml, map[string]*bintree{}},
			"_record_target.xml": &bintree{templatesCat1_record_targetXml, map[string]*bintree{}},
			"_telecom.xml": &bintree{templatesCat1_telecomXml, map[string]*bintree{}},
			"cat1.xml": &bintree{templatesCat1Cat1Xml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

