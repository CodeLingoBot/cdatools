// Code generated by go-bindata.
// sources:
// templates/cat1/_addresses.xml
// templates/cat1/_author.xml
// templates/cat1/_id.xml
// templates/cat1/_organization.xml
// templates/cat1/_record_target.xml
// templates/cat1/_telecom.xml
// templates/cat1/cat1.xml
// DO NOT EDIT!

package exporter

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesCat1_addressesXml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x8f\xcd\x4a\xc6\x30\x10\x45\xf7\x79\x8a\xf1\x83\x80\x4a\x69\xf7\x92\x06\xa4\x5b\x77\x55\x04\x37\x52\xda\xa9\x04\xda\xa4\x4c\x52\x44\xc4\x77\x77\xf2\xa3\xb4\x62\x77\x9d\x73\xee\xdc\x89\x92\x57\x30\xef\x76\x84\xfb\x69\x22\xf4\xfe\x71\xdd\x96\xeb\x77\x30\xae\x7e\x26\x13\x90\x2a\x18\x32\x80\xdb\xd5\x4d\xb8\xf8\xba\x88\x37\x80\x44\x8e\x40\x6a\xa1\xa2\x02\xbb\xc7\xf6\xa2\x64\xfb\x13\xa8\x9f\x3c\x32\xbd\x68\x01\xfc\x29\x09\x33\xdb\xaf\x15\xf8\x40\x88\x01\xee\x5a\xa0\xc1\xbe\xe1\xaf\xde\xe7\xf9\x27\x67\x54\x76\x4a\xd3\x83\xb1\xa8\xe3\xe2\x92\x64\xde\xfc\x27\xc0\x57\x3c\x26\x95\x8d\x26\x7c\xe8\xe3\x2d\x1d\x0f\x52\x30\x91\x2c\xf9\x30\x04\x3c\x59\x7d\x9c\x94\xfd\x91\x65\x6f\x73\xfc\xb7\x74\xfc\xfa\x93\xfc\x62\xb6\xa4\x1e\x70\x29\x77\xbb\x0d\xf4\xa7\x3f\xcf\xf2\x09\x85\x0b\xd5\x44\xac\xc5\x77\x00\x00\x00\xff\xff\xdf\x4d\x5c\x4b\x84\x01\x00\x00")

func templatesCat1_addressesXmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesCat1_addressesXml,
		"templates/cat1/_addresses.xml",
	)
}

func templatesCat1_addressesXml() (*asset, error) {
	bytes, err := templatesCat1_addressesXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cat1/_addresses.xml", size: 388, mode: os.FileMode(420), modTime: time.Unix(1451930355, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCat1_authorXml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x54\x5f\xab\xdb\x3e\x0c\x7d\xcf\xa7\x50\x0b\x29\xcd\xa5\x75\xf8\xbd\xfe\x48\x03\xd9\x2e\x63\x17\x7a\xb7\xc1\x2d\x8c\x3d\x0d\xb7\x56\x52\x43\xe2\x14\xdb\x69\xd7\x8d\xfb\xdd\xa7\xd8\x4e\xff\xaf\x0f\x4d\x74\xac\x73\x24\x59\x52\xb2\x78\x04\x65\xa7\x36\x50\x74\x76\xdb\xea\x55\xb3\xab\xa7\x07\x90\x2d\xfb\xae\xa5\x45\x3d\x03\xee\x70\x78\x6a\x5a\x81\xb5\x61\xde\x2d\x01\xd4\x9a\xd0\x38\x8f\xa2\x6c\x34\x9f\xc3\xdb\xe7\x62\xb9\x84\x2d\xdf\x23\xfc\xc7\xd8\x53\x60\x31\x78\x2d\x7e\xc0\x1a\x41\xe0\x5e\x6e\x10\x88\xb1\x43\x6d\x5a\xc5\x22\xa0\xdf\x6a\x8b\x83\x7c\x5b\x82\x25\xeb\xe3\x73\x01\xa2\xdd\x74\x0d\x2a\x0b\x52\x11\x26\x0d\xe0\x2f\x4e\x59\x21\xd0\x2b\x1f\x94\xb8\xed\xdf\xb9\xe5\x60\xba\x75\x23\x8d\x91\xad\x82\x3d\x2a\xd1\xea\x54\x63\x25\x8d\xd5\x47\x06\xf3\x79\x1e\x65\x3e\x42\x4e\x11\x33\x2b\x1b\x84\x3d\xaf\x3b\x5c\x8c\xb3\x78\x31\x64\xb9\xea\xe1\x38\x1f\x43\xea\xbc\x38\xa9\x55\x0a\x45\x71\x26\xc6\xc4\xd2\xb0\xee\xca\x12\xe9\x71\xb4\x68\xd8\x07\x67\xd0\x61\x49\xe9\xff\x9c\x81\x14\xf0\xff\x02\x34\x57\xd5\x50\x14\x7b\x11\x06\xfe\xb8\x4a\x5f\x84\xbb\xd8\x89\x57\x98\xc1\x44\x8a\x84\x0e\xde\xcf\x74\x2e\x84\x46\x63\xee\x34\x0a\x8f\xe3\xa0\x14\xec\x1b\xb9\xc0\xbe\xd1\xb4\x58\xe3\xa6\x6d\xee\x34\x57\x1e\x1f\x24\x83\x79\x23\x19\xc8\x5e\x32\xa2\x7f\x59\xc2\x74\x12\x14\xbe\xb9\x2e\xc2\x68\x01\x4a\xd6\x49\xd0\x89\x73\xf7\x38\xdd\x9f\x77\xf2\x20\xc1\x8a\x37\x38\x18\x64\x56\x92\xda\x95\x5f\x74\xc1\xbb\xb3\x4f\x52\x1b\x4b\x5a\x59\xea\x3d\xce\x8c\x92\x37\xb2\x3e\x3e\xa0\x2c\x79\x60\x04\x8f\x21\x62\x7a\x0e\x99\xa5\xf7\x59\x51\x57\xdf\x81\x66\x1a\xaf\x4a\x7b\xf6\x03\x76\x2a\xed\xae\x2c\x3f\x16\x52\x55\xde\xf3\x94\x60\xd6\x70\xd5\x95\x7c\x63\x3b\x8d\xfa\xb5\xdf\x96\x2f\x7d\xf8\x8b\x74\x3d\x81\xb9\x33\x97\xef\x63\xc6\x49\xd0\xb4\xa5\x3d\x70\x8d\xff\xd0\xe9\x61\x27\x73\xe5\x17\xc1\x75\xbd\x0f\xd2\xed\x0b\xef\x3b\xfa\x55\x57\x5c\xc9\xdf\xdc\xd2\xf2\xdc\x0e\x94\x8f\x74\xe9\x31\x83\xb1\xc6\x1d\x8d\x19\xed\x26\x8a\xcb\x93\x71\xe2\xe6\x23\x7c\x33\xde\x6c\x1f\x6d\x7a\x98\x85\x7d\x61\x01\x48\x12\x7f\x95\xb7\xa9\xd1\x8a\xa6\xc3\x8e\xfe\x0d\x00\x00\xff\xff\xef\x9d\x0f\x29\x8e\x04\x00\x00")

func templatesCat1_authorXmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesCat1_authorXml,
		"templates/cat1/_author.xml",
	)
}

func templatesCat1_authorXml() (*asset, error) {
	bytes, err := templatesCat1_authorXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cat1/_author.xml", size: 1166, mode: os.FileMode(420), modTime: time.Unix(1451930355, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCat1_idXml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\xce\x41\xca\xc2\x30\x10\x05\xe0\x7d\x4f\xf1\x1a\x08\xb4\x3f\x3f\xf5\x02\x69\x56\xba\xe8\x56\x04\x0f\x60\x26\x30\xd0\x66\x64\x1a\x51\x10\xef\x6e\x2a\x88\xa2\x2b\xb7\x33\xdf\x9b\x79\xce\xd6\x88\xa7\x74\xc0\x10\x76\xd3\x71\x6c\xce\x60\xe9\xf6\xca\x99\xf4\x1f\x1c\x28\x65\x8e\x4c\x8a\xbf\x49\x02\x8d\x73\x37\xac\x5b\x90\xaa\x28\xac\xaf\x2a\x67\xc1\x11\xcd\xcb\x75\x5b\x91\x8c\xba\x87\x31\x2d\xae\x8b\x01\x1c\x07\x68\x19\xf7\xc6\xd9\x1e\x9f\xd6\x7a\x03\xd0\x25\x53\x9a\x59\xd2\x97\xd9\x3c\x37\x0f\xb8\xf2\xcb\xcb\x1b\x4a\x13\x7a\x3f\xff\x6b\xbe\x04\xef\x01\x00\x00\xff\xff\x47\xbb\xda\x6b\xf9\x00\x00\x00")

func templatesCat1_idXmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesCat1_idXml,
		"templates/cat1/_id.xml",
	)
}

func templatesCat1_idXml() (*asset, error) {
	bytes, err := templatesCat1_idXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cat1/_id.xml", size: 249, mode: os.FileMode(420), modTime: time.Unix(1449519741, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCat1_organizationXml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x92\x4f\x8b\xdb\x30\x10\xc5\xef\xfb\x29\xde\x1a\xb4\x24\x5d\xdb\xb9\x17\xc7\xd0\xf6\x94\x4b\x0a\x69\xa0\xc7\xa0\x5a\x63\x23\x88\x25\x47\x92\x1b\xd2\xd2\xef\x5e\x49\x96\x9b\x3f\x10\xe8\x25\x61\xe6\x69\x9e\xe6\xf7\xac\x8a\xbd\xa2\x1d\x55\x83\xaf\xa6\xe3\x4a\xfe\xe2\x4e\x6a\xb5\xef\x87\xe3\xe2\x0c\xa9\xcb\xef\x46\x3a\x32\x39\xf4\x8d\x8a\x0f\xbd\x16\x74\xb4\xe5\xed\x48\x0e\xc7\xbb\x83\xe2\x3d\xc1\x3a\x23\x55\xb7\x04\x19\xa3\x0d\x58\xfd\x52\x31\x06\xd9\x0f\xda\x38\x64\x6d\xef\x32\x30\xdf\xf4\xdd\xf5\x1a\x59\x95\xe1\xfd\x3a\xfa\x8e\xac\xce\xc2\x08\x50\xbd\x16\x05\x76\x34\x18\xb2\xa4\x9c\xc5\xa8\xe4\x69\x24\x18\xea\xa4\xbf\xe0\x72\xbf\xd1\x7e\xb3\x45\x51\xc4\x31\x86\x9f\xdc\xe0\xc7\xd8\xb6\xe4\xff\x2e\x8e\x6c\xf9\x39\x16\x5e\x04\x5a\xbf\xd1\x21\x87\x14\xf8\xb8\x86\xe1\xaa\xa3\x3b\xa3\x72\x23\x2c\x7e\xc7\x93\xc0\x46\xc4\x1c\xde\x26\xaf\x1c\x6f\x52\x2c\xa3\xf4\x27\xfe\xce\xe9\x7c\x8b\xb8\x8b\x73\x9e\x2e\x2d\x53\x63\x39\x1d\x4e\xcd\x9d\xc7\x70\x8b\xd0\xba\xd2\x7d\xd1\xca\x71\xa9\x2c\x22\x7b\x01\x3b\x50\x23\x5b\xd9\x5c\x21\x95\x76\xbe\x38\x8d\xd2\x90\x48\x7c\xe1\x6c\xed\xb3\xbb\xdf\x7b\x1b\x1c\x58\x5d\xad\xa2\x3c\xe5\x90\x58\x1d\x1d\xa9\xd1\xfd\x13\xe0\xfd\xa4\xce\xd4\xa9\x7c\x00\x4f\x16\x61\xfb\xc0\x9e\x8c\xb9\x10\xfe\xe3\xd8\x27\xc6\x9f\x26\x95\x66\xe7\x54\x3f\x38\x27\x8f\xd9\xf9\xbf\x32\x0d\x2f\x6a\x15\x12\xf8\xf7\x6c\x58\x5d\xbf\xfc\x0d\x00\x00\xff\xff\xa5\x4c\x77\x09\xc9\x02\x00\x00")

func templatesCat1_organizationXmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesCat1_organizationXml,
		"templates/cat1/_organization.xml",
	)
}

func templatesCat1_organizationXml() (*asset, error) {
	bytes, err := templatesCat1_organizationXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cat1/_organization.xml", size: 713, mode: os.FileMode(420), modTime: time.Unix(1451930355, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCat1_record_targetXml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x56\x6d\x6f\xe2\x46\x10\xfe\x9e\x5f\x31\x67\x29\x28\xb4\x64\xc1\x90\x1c\x34\x82\x48\x84\xcb\x5d\x90\x72\x57\x04\x54\x27\x15\xa1\xca\xc1\x0b\x59\xc9\x5e\xa3\xf5\x3a\x57\x8a\xf8\xef\x9d\x7d\xc3\x36\x2f\xb9\x7e\xea\x17\xb4\xcc\x3c\xf3\xf6\xec\xec\x8c\xbb\x97\x1f\x60\x99\xf1\x05\x8c\xe9\x22\x11\xe1\x34\x10\x2b\x2a\xa7\xf1\x3a\xba\xfa\x01\x2c\x21\xdf\x05\x93\x54\xd4\x60\x1d\x48\x46\xb9\x84\x5f\xe2\x24\xa4\x51\x4a\x0c\xba\x0a\x54\x88\x44\xc0\xe5\xfd\xc5\x45\x57\x14\x1c\xdc\x5f\x00\x74\xad\xcd\x38\x89\xa8\xfa\x8f\x92\x4b\x60\x4b\xb8\xb2\x72\xf2\x95\x86\x6c\x11\x44\xc6\xd5\xb7\x2c\x7e\xa1\x02\x3e\xf4\xc0\xf3\xa0\x52\x81\x93\xa0\x7e\x9a\xb2\x15\x77\xb0\x2a\x6c\x55\x64\x00\xeb\x3b\x16\x1c\xee\x7a\x60\x33\x1c\x7e\xda\x8e\x93\x44\xde\x9d\xf6\x64\xc2\xd5\xe0\xf1\x6f\x49\x79\xca\x12\x7e\x06\xe7\x22\xee\x4a\x91\xde\x02\x01\x2f\xd9\x72\x89\x99\xbc\x6c\x24\x4d\xc9\x83\xf9\x73\x79\xaf\xb4\xc3\x50\xf3\x57\x31\x88\x1a\x54\x30\xb1\xaa\xd5\x39\x4a\x27\x52\x30\xbe\xba\xfa\x51\xb3\x7e\x88\x15\x54\xab\x2e\x10\x82\x77\x80\x85\xd0\x52\x95\x2c\x04\xea\x52\xee\x79\x7e\xb3\x75\x73\xeb\x81\xc0\x3a\x7b\xde\x28\x0a\x16\xf4\x35\x89\x42\x2a\x7e\x17\xab\x80\xb3\x7f\xb0\xa0\x84\x7b\x50\x2f\x38\x74\xce\x83\x30\x14\x90\xa5\xb4\xe7\x3d\x8d\xbc\x42\x65\xc5\xfb\xe9\x23\x86\xa6\x29\x4d\x15\xdd\x9c\x45\x87\x7c\x2f\xf1\xe6\xff\xaa\x41\x60\x60\x8a\x7a\x11\xf0\x15\x85\x63\xfb\x82\x5d\xd1\x32\x95\x82\x52\x99\x1b\x5a\x4f\x8a\x0b\x25\x57\x56\x5d\x83\xb1\xae\x9e\x19\xa7\xf7\xdd\xcb\x9e\xb3\x44\x7d\xfd\x14\x00\x76\xa5\x80\x0b\x26\x37\xda\xcc\x05\x18\xa0\x40\x1b\x6b\x4d\x0e\x4c\x65\x20\x69\x09\x39\x51\x12\x1b\x47\xe9\x72\xec\x3a\x41\x49\x34\xc0\x66\x2b\x19\xfc\xc9\xd6\x1a\x5e\x50\x17\x12\x49\x32\x2e\xc5\x41\x2e\x46\x66\xd2\xb1\xfa\x9c\xe3\x72\xdf\x1d\x37\x84\x4e\xfa\x90\x80\x66\xa3\x09\x0f\x99\x88\xb0\xa1\x64\xc2\x61\x1c\x92\x53\x34\x1d\xf0\xf3\x40\x43\xbc\x96\xf0\x0c\x27\x5f\xfb\xef\x32\xd0\xf0\xdb\xad\xc6\x4f\x8a\xfe\x63\xf2\x6e\x81\xdd\xba\x62\xc4\x9e\x25\x8d\xf0\xf9\xc5\xa6\x43\xbf\x8f\x3c\x7c\x71\x51\x86\x47\x94\xdf\xfd\xea\x5f\xb7\x3b\xfe\x75\xb3\xed\x5f\xb7\x1a\x8d\x86\xe7\xda\xdb\xb6\xdd\xde\x37\x0f\xe2\x62\x1a\x2b\xf6\x46\xb9\x66\xde\xf5\xe7\x67\x26\x52\xd3\x43\x46\x97\x63\x97\x41\xcc\xa2\x4d\x09\xfc\x1c\x58\xac\xd5\xb9\x28\xf5\x62\x18\x7c\x56\x31\xe3\x0c\xb9\x46\xab\x37\xfa\x85\x72\x7c\x8c\x8a\x0e\x58\xe0\x4f\xcf\x2b\x3a\x34\x4a\x74\xe9\x69\xe5\x64\x93\x4a\x1a\xf7\xbc\x26\xf1\x3f\x92\xce\x4d\x83\xf8\xc4\xf7\x5b\x9d\x4e\x8b\xdc\x12\xbf\x08\xf9\x86\xf1\xf0\xd5\x3e\xb7\xa1\x7f\x22\x98\x63\x03\x73\x79\x61\x42\xbe\x4e\x59\x4c\x1d\x79\xc5\xe8\x0f\x4a\x19\x9a\xde\x2e\xd8\x98\x01\x50\x71\xa8\x31\x4e\x94\x53\x8f\x1f\x91\x02\x55\x67\x2a\x53\x56\x44\xeb\x54\x71\x07\x43\x45\x2b\x55\x0d\xc5\x19\x1e\xb2\x74\x1d\x05\x1b\x53\xda\x91\x2b\x8d\x46\x57\xb6\x5b\x8e\xb8\x18\x7c\x1a\x80\xce\x34\xe0\x21\x3c\xca\x57\xce\x54\x0b\xff\x8c\xd6\x8f\xa4\xd9\xea\x94\x4a\xdf\xb9\xea\x4a\x1c\xec\x1d\x9e\x21\x82\x6a\xfd\x17\x91\x64\xeb\x33\x7c\xec\x3d\x9c\x25\x25\x47\xfc\x67\x66\x0e\x4c\xfe\x47\x7a\xd4\xf2\x8b\x70\x5e\x67\xc1\x0a\x47\xfb\x6c\x6e\xf7\xed\xb3\x15\x15\x49\xcc\x1f\x8f\x83\xf7\x1c\x87\x7b\x02\xf7\xfe\x60\xbf\xba\x1d\x7c\x1b\x07\xeb\x59\xaa\x17\xe3\x7c\x36\x37\x87\x2d\x78\xc3\xc7\xe9\x67\xef\x0e\xb6\x1e\xe5\xde\x0e\x76\xbb\xdc\x55\x9e\x16\xce\xd7\xf5\x1a\x5f\xc4\xd5\x5e\x54\xd3\xda\xaa\x03\xbb\x51\x7a\x71\xca\xf6\x28\x6f\x8b\x72\xa1\xec\xfe\x72\x26\xf9\x06\xcb\x9d\x94\x9b\xc4\xc9\x07\x49\x1c\x67\x78\x01\x7a\x33\xe7\x7a\x3b\xf3\xf0\xab\x01\x5f\xe4\x30\xb4\x0b\xfd\xf8\x52\x5a\xa4\xd3\xc1\x33\xc1\x63\xd3\x83\x40\x7f\x9b\x20\x27\xfd\x4c\xbe\x26\xf8\x55\x61\xdb\xe4\x69\x38\x9d\x8c\xea\x83\x4e\x2b\xbf\xbe\x73\x21\x7c\xa2\x6e\xda\x27\x37\x2a\xc6\x6f\xad\xb6\x3a\xdf\xa2\xcc\x27\x4d\x35\x75\xce\x45\x18\x3e\x3d\xd6\x47\x83\xc1\x91\xff\xbc\xcc\xd2\x43\x70\x62\xdd\xff\xe9\xcc\x5c\xe0\x7c\xd6\x98\x97\x86\x8f\x19\xa7\xef\x32\xe5\xf6\x85\x5d\x18\x85\x89\xbf\xff\x63\xbe\x36\xbb\xf5\xf2\xd7\xe8\xbf\x01\x00\x00\xff\xff\x7d\xe0\x62\xc4\xe6\x0a\x00\x00")

func templatesCat1_record_targetXmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesCat1_record_targetXml,
		"templates/cat1/_record_target.xml",
	)
}

func templatesCat1_record_targetXml() (*asset, error) {
	bytes, err := templatesCat1_record_targetXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cat1/_record_target.xml", size: 2790, mode: os.FileMode(420), modTime: time.Unix(1451930355, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCat1_telecomXml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb2\x51\x55\x54\x48\x2b\xcd\x4b\x56\x08\x49\xcd\x49\x4d\xce\xcf\x0d\xc9\x2d\xc8\xd1\x28\x57\xc8\xcc\xd7\x0b\x2f\xca\x2c\x49\x2d\xd2\x51\x28\x81\x48\x28\x68\xe5\xe6\xa7\xa4\xe6\x14\xeb\x41\x15\x6a\x2a\xa4\x16\x15\xe5\x17\x29\xa8\xda\x71\xd9\xc0\x94\x94\x16\xa7\xda\x2a\xd9\xa8\xda\x42\xf9\x7a\xa1\xc5\xa9\xaa\x76\x4a\x0a\x65\x89\x39\xa5\x40\x09\xa0\xa8\x95\x36\x92\x6c\x18\x48\x18\x24\xaf\x6f\xc7\x05\x08\x00\x00\xff\xff\xc2\xa2\x1f\x4c\x87\x00\x00\x00")

func templatesCat1_telecomXmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesCat1_telecomXml,
		"templates/cat1/_telecom.xml",
	)
}

func templatesCat1_telecomXml() (*asset, error) {
	bytes, err := templatesCat1_telecomXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cat1/_telecom.xml", size: 135, mode: os.FileMode(420), modTime: time.Unix(1451930355, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCat1Cat1Xml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x58\x6d\x73\xe2\x38\x12\xfe\x9e\x5f\xa1\x71\x15\x5b\xc9\x56\xb0\x79\x49\x26\xd9\x94\xe3\x2d\x06\xd8\x0b\x55\x09\xc9\x02\xb9\xbd\xfb\xb4\x25\x6c\x01\xba\xb5\x65\x4e\x96\x43\xb8\xad\xf9\xef\xd7\x7a\x31\xc8\xe6\x2d\x37\x35\xf7\x6d\x53\xa9\x60\x5a\xad\xee\x56\xf7\xd3\x8f\xda\xf1\x6b\x9f\xd0\x2c\x67\x21\xea\x62\xd1\x9c\x24\xcb\xf8\x7c\x85\x68\xea\xfe\xc6\xa9\x20\xfc\x12\x2d\xb1\xa0\x84\x09\xf4\x63\x92\x46\x24\xce\xdc\x11\x09\x53\x1e\x5d\xa2\x05\xc1\x11\xe1\x1b\xf1\x83\xfa\x7a\x81\x08\xe7\x29\x47\xb5\xe0\xcc\xaf\xd5\x10\x4d\x96\x29\x17\xc8\x99\x53\xb1\xc8\xa7\x6e\x98\x26\xde\x92\xa7\xff\x22\xa1\x08\xd7\x4b\x4e\xb2\xcc\x0b\x23\x2c\xd2\x34\xce\x3c\x6d\xc6\x41\xb5\x23\x5b\xa7\x29\x4f\x30\xf3\xf2\x9c\x46\xbb\x8a\x82\x26\x64\x57\x3a\x5d\x0b\x52\x58\xfd\xf9\x3d\x89\xd1\x1b\xe1\x19\x4d\xd9\xbd\xd3\x74\x1b\x0e\x22\x2c\x4c\x23\xca\xe6\xf7\x4e\x2e\x66\xf5\x5b\xe7\x67\x50\xeb\xc6\x94\xd1\x10\xc7\xbd\x34\xcc\x13\x79\x72\xd8\xc6\xb2\xbb\xf7\x8c\xde\x3b\x0b\x21\x96\x77\x9e\xb7\x5a\xad\xdc\x55\xdb\x4d\xf9\xdc\x6b\x35\x1a\x4d\xef\x1f\x4f\x8f\xe3\x70\x41\x12\x5c\xa7\x2c\x13\x98\x85\xc4\x39\xd3\xdb\xc0\x30\x67\x77\x8b\xf8\xa6\x0e\xca\x77\x6f\xed\x42\x7e\xf7\x96\x86\xd5\x35\x0f\x64\x9b\xf5\x2c\x12\x15\x05\x29\x71\x82\x33\x84\xfc\x4f\xf5\x3a\xfa\x75\xd4\xeb\x20\x9d\x74\x54\xaf\x2b\x31\x27\x38\x4e\xba\x90\x47\x04\x87\x22\xf7\xce\xeb\xd8\xf1\xd4\x82\x58\x2f\xc9\x20\x42\x3c\x4d\xc5\xbd\xd3\x72\x9b\x9f\xdd\xdb\xab\x86\xdb\x74\x9b\xcd\xf6\xed\x6d\x1b\x1e\xda\x90\x89\x77\x41\x98\xce\xcc\xcb\x73\xb7\xf7\xfb\x43\xaf\x01\x3f\x57\x0d\x63\x42\xba\x7c\x1d\xa3\x91\x74\x51\xb8\x9d\x10\x00\x0b\x16\x04\x81\x6d\x13\x82\x30\xa2\x63\xde\x1a\x6e\x0b\x7e\x5b\x52\x62\x19\x57\xe7\xb1\xb6\xff\xcf\x06\xaf\x94\x41\x64\x59\xec\x3d\xd5\xa7\x38\x23\xd1\xf7\xb1\xdd\xb2\x6d\x4f\x16\x34\x43\xf0\x2b\x16\x04\xcd\xe3\x74\x8a\xe3\x78\x8d\x72\x46\xff\x9d\x13\x44\x23\x00\x0d\x9d\x51\xc8\xd0\x0c\x5a\x41\x48\x55\x15\x41\x54\x00\xca\xf8\xa7\x85\x5f\xbf\x76\x8f\x24\xa8\xdd\x21\x59\x8d\x30\x8b\xd2\xe4\xfc\x02\x5a\xa8\x9a\x9d\xcd\x7e\x59\x4f\x55\xe3\xc2\x52\xb8\x2d\xfa\xf5\x75\xf3\xb6\x55\x07\x68\xcb\xaf\xe3\x75\x06\x87\xdc\x77\xb0\xcf\x32\x57\x5b\x95\x21\x4e\x60\xef\xe3\xf3\x60\xd8\x75\x50\x44\x33\xc8\xcb\x5a\xcb\x7e\xcd\x71\x4c\xc5\x1a\x3d\x11\x9c\xe5\x9c\x00\x02\x64\x63\x15\xc0\xa2\x22\x26\x81\x0a\x6e\xc0\x42\x79\xf0\xb0\xd0\xf0\x3d\xbd\xb8\x2f\x63\x9b\x83\x84\x00\x59\x01\x98\x43\xb2\x79\x8b\xc3\x90\xd9\x0c\x08\x82\xbe\x91\x89\x14\xbe\xe1\x38\x27\x3a\x45\x52\xc9\x1d\xa6\xab\xf3\x0b\xf7\x75\xd2\x95\x7f\x19\x7d\xb7\x33\x15\xa6\x6c\xa6\xb3\xaf\x62\xb6\x5a\x61\x78\x2a\x1f\xd7\x6e\xeb\xda\x58\x89\x31\x9b\xe7\x78\x4e\xac\xed\x84\x59\xb5\xe0\xea\x7c\x00\xab\x82\x19\x4d\xdc\x35\x88\x95\xa3\x69\x0e\xe1\xc3\x87\xe4\x1d\xf7\x8b\xfe\x52\x0b\xe4\xaa\x26\xce\x09\xe6\x73\x22\x14\xcd\xfe\xa0\x75\x37\x14\x7b\x61\x14\x0b\xf2\x1d\x0b\x0e\xd4\x74\xbe\xba\x34\x46\x5d\x23\xb8\x90\x8a\x67\xda\x25\x9d\x15\x44\xfc\xe9\x1e\x31\x1a\xa3\x3f\x41\x8e\x0e\x45\xa2\xd6\x24\x28\x7f\xbf\x44\x38\x17\x0b\x78\xba\xbb\x47\x1c\x0e\x4c\x8c\x19\xb7\xa3\xc4\x99\xb1\x83\x90\xfe\x5e\x8e\xf7\x07\xbd\xf7\x42\xa9\x7c\x55\x7f\x4f\xc7\xac\xd4\x6a\x81\xfa\x90\x69\x1c\x3f\x74\x1e\x1f\xd1\x02\xbf\x11\xd4\x74\xdd\x1f\x4d\x3c\x2e\x7a\xea\xfc\x13\x4d\x01\x23\xe4\x8d\x02\x98\x20\xc2\x25\x30\x76\xca\x5c\x13\xcf\x04\xf0\x63\x42\x4f\x67\x0a\x4d\x5d\xbb\x35\x28\xd3\x0d\x47\xde\x31\x84\x4c\x24\xe2\x70\x61\x0b\x0b\xf9\x8c\x05\x46\x59\x3e\x4d\x68\x26\xd9\x0e\xee\x03\xe8\x37\xee\x71\x32\xa7\x99\xe0\x6b\x57\x55\x53\xf9\x32\xb0\x05\x0c\xe4\x99\x80\x5b\x02\xb3\xfd\x1e\x35\xa6\x33\xe8\x16\x84\xf5\x73\x4c\xe6\x38\x56\x51\x4a\x2c\x86\x70\xc3\xf1\x22\x30\x65\xb9\x08\x0e\x5a\x5d\xa2\x09\x2e\x42\xd0\xd3\x5b\x35\xb8\x20\x63\x70\xf2\x39\x66\xf4\x3f\xaa\x3f\x5c\x83\x31\x13\x94\x4e\xdd\x46\xb4\x89\x2f\x30\x39\xf2\x31\x9c\x6d\xce\x48\xd4\xdd\x59\xa9\x99\x07\x54\xd4\x67\x04\xce\xc5\xf9\xc5\x46\xfc\x6c\xb9\xad\x54\xdd\x20\x64\x63\xd4\xb5\x75\x2f\x91\xb3\x39\x8a\xe5\xd8\x56\x71\xb6\x5e\x3e\x08\x17\x0b\x32\x10\xbb\x77\xe0\x58\xbe\x67\x65\xa0\x5c\xba\x7d\x95\x38\x50\x44\x40\x05\x78\x86\xaa\x68\xbc\xa1\xd5\x22\x55\x62\x21\xb5\x4d\x08\xaa\xc8\x76\x61\x8a\x8a\x6f\x21\x52\x01\xa0\xab\x89\x8f\xc4\x44\xf9\x49\x40\x4f\xa2\xdb\x24\xea\x78\x5d\x55\xf0\x1d\x3b\xf6\x4d\x2a\x76\xb5\x15\x1b\x97\xf9\xd2\xea\xe8\x8d\x05\x57\x91\x6a\xc1\x98\x87\x6d\xc9\x44\x63\x01\x84\x6f\xb1\xe0\xd8\xda\x54\x94\xa2\x0f\x86\xc5\x3a\xd8\x54\xcb\xb2\x36\xe8\x59\x06\x15\x59\x1d\x80\xdc\x86\x92\xe0\x42\xdc\x47\x47\xdb\xe0\x07\xd1\x96\x98\xf4\xcf\x20\xaa\x80\x94\x46\xb6\xe1\xaf\xbb\x4e\x70\x14\xc9\xc9\xf3\x84\xa7\x8e\xd6\x22\x55\x7f\x46\x5e\xe5\x43\x2d\x3d\xe1\x59\x00\x0a\x60\x8e\x3d\xe1\x79\xa2\xb5\xaa\x8e\x8d\xb8\xe2\xd8\x98\x3c\xe4\xf8\x5b\xda\xcc\x2a\xee\x8b\xea\x84\xc0\x32\xe8\x33\xe8\x80\xa0\x14\x18\xf2\xe7\x70\x57\xb3\xe0\x20\xe2\xb4\x15\xf7\x17\xca\x01\xfb\xb5\xc0\xf7\xb4\x7e\xc5\xc8\x0c\x27\x34\x5e\x9f\xb4\xf2\x88\x8d\x11\xa3\x6f\xc7\xe6\x95\x82\xdb\xd2\x45\x71\x8c\x0f\x40\xf1\x34\xfb\x95\xa3\x3a\xcc\x80\xff\x17\xe2\xb3\xbb\xcd\xf7\xf6\xf1\x83\x9e\x0a\xbe\x02\xe1\x64\x04\xfd\x59\xd8\xf0\xf5\x8d\x69\xbe\x54\x79\xe2\xd4\x5c\x65\x21\xa2\x63\xd9\x31\xcd\x0e\x4d\x6b\xbd\x3b\x74\xf5\x7b\x9d\x73\x78\xa2\xfe\xc9\x85\x41\xcb\xa6\x1a\x69\x64\xf8\x32\xb0\x45\x65\x9b\xbf\xe0\x3f\x08\x28\x1c\xb6\x79\xe5\x7e\xb6\xa9\x09\x9a\xd1\x02\x33\xdc\xea\x84\x08\xd3\xb7\x8f\x94\x91\xa0\xd5\x68\xa1\x2f\x39\x87\xd7\xbc\xb9\x00\x0a\x1f\x45\xae\xef\xed\x6a\x6d\x2d\x84\x32\xe7\x5f\x48\x04\x6d\x1c\xc1\x5d\x53\xe6\x3b\x78\xdd\x13\x24\x78\xea\x48\x13\xf2\x69\xbb\xb2\x4c\x41\x12\x4b\xfe\x0c\x1a\xcd\x9b\x76\xc3\xf7\x2c\x89\x65\x3d\xcd\x19\x0c\x1e\xc1\xeb\x18\x6c\x9b\xe7\x6d\xe1\xad\xb3\xf8\x05\x7f\xe4\x19\x14\xee\xb7\x17\xa7\xa8\x21\xc8\xef\xce\x6f\x6e\x9b\x17\xad\x9b\x66\xbd\x0d\x6f\x6d\x7b\x78\x5a\x17\x0e\x4e\xdc\x53\xb3\x90\xe5\x1f\xde\xa8\xf3\x19\x0e\x25\xd7\xf3\x27\xf9\x12\x2e\xe7\xfe\xc0\xd4\xd1\xf7\xf6\x2e\x23\x3b\x01\xe9\x4c\xac\x30\x27\xe5\x6d\xb6\x14\xed\x02\xb9\x12\x0e\x2a\x20\xbd\x8b\x33\x90\x6d\x9f\x2b\x93\xce\x91\x39\xe7\xd4\x2c\x62\x1d\x80\x1e\x79\xfd\x53\x60\xb5\x74\x99\x75\x48\xa0\x64\xe0\xa2\x1e\x09\xff\xa8\x30\xcf\x37\x55\x6a\x07\xb8\xdf\x03\xba\x27\xc0\x7b\x0c\xbe\x1f\x06\xf0\x71\x08\xef\x80\xd8\xfb\x58\x65\x0e\x0c\x7b\xa5\x51\xef\xc8\x88\xf4\x2d\x1c\x77\x74\xe4\x39\x30\xf0\x6c\xc1\x33\x0d\x1b\x4d\x7c\x1d\x41\x59\x71\xfb\xaa\x7e\xd5\xba\xfd\x5c\xbf\x6d\x85\x61\xfd\xaa\x4d\xa6\x8d\xab\xf0\xa7\x9b\x16\xbe\xf9\x8b\xa4\x8e\x93\x54\x75\xde\xd8\x9d\x36\xcc\xac\xf1\x40\x18\x5f\xef\x1b\x24\x8a\x31\x62\x4c\x60\x65\x77\x48\x28\x35\xea\xee\x80\x60\x94\x0e\xdc\xe2\xdf\x81\x32\xca\x44\x51\xea\x85\x63\x2d\xb0\xc5\xdc\xde\x4b\x5f\x5d\xf8\xe6\x3f\x02\xf2\x32\x7d\x19\x3d\xff\x7d\xd0\xeb\x8f\xc6\x68\xd4\x1f\xc2\x27\x7a\xe8\x8f\xfa\xc5\x7b\x2d\x94\x32\x59\xa6\x0c\x76\x17\xb0\x17\x3c\x57\xf4\x1e\x7d\x49\xa3\xb5\x7d\x2b\x3f\xf5\x3b\xe3\xd7\x51\xbf\x64\xa6\x7c\x6f\x8f\xfa\x2f\xcf\xa3\xc9\x60\xf8\x37\xf4\xd2\x19\x75\x9e\x8e\x68\xbe\x74\x26\x83\xfe\x70\x82\x7a\x9d\x49\xc7\x68\x8d\x4b\x6a\x0a\xdd\x95\x40\x24\xd6\x36\xc1\x9e\xf9\x5e\xf5\x3f\xb3\xc1\xd9\x7f\x03\x00\x00\xff\xff\x0f\xad\x75\x99\xbc\x16\x00\x00")

func templatesCat1Cat1XmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesCat1Cat1Xml,
		"templates/cat1/cat1.xml",
	)
}

func templatesCat1Cat1Xml() (*asset, error) {
	bytes, err := templatesCat1Cat1XmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cat1/cat1.xml", size: 5820, mode: os.FileMode(420), modTime: time.Unix(1451935445, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/cat1/_addresses.xml": templatesCat1_addressesXml,
	"templates/cat1/_author.xml": templatesCat1_authorXml,
	"templates/cat1/_id.xml": templatesCat1_idXml,
	"templates/cat1/_organization.xml": templatesCat1_organizationXml,
	"templates/cat1/_record_target.xml": templatesCat1_record_targetXml,
	"templates/cat1/_telecom.xml": templatesCat1_telecomXml,
	"templates/cat1/cat1.xml": templatesCat1Cat1Xml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"cat1": &bintree{nil, map[string]*bintree{
			"_addresses.xml": &bintree{templatesCat1_addressesXml, map[string]*bintree{}},
			"_author.xml": &bintree{templatesCat1_authorXml, map[string]*bintree{}},
			"_id.xml": &bintree{templatesCat1_idXml, map[string]*bintree{}},
			"_organization.xml": &bintree{templatesCat1_organizationXml, map[string]*bintree{}},
			"_record_target.xml": &bintree{templatesCat1_record_targetXml, map[string]*bintree{}},
			"_telecom.xml": &bintree{templatesCat1_telecomXml, map[string]*bintree{}},
			"cat1.xml": &bintree{templatesCat1Cat1Xml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

