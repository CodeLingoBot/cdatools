// Code generated by go-bindata.
// sources:
// exporter/templates/cat1/_address.xml
// exporter/templates/cat1/_author.xml
// exporter/templates/cat1/_id.xml
// exporter/templates/cat1/_measures.xml
// exporter/templates/cat1/_organization.xml
// exporter/templates/cat1/_providers.xml
// exporter/templates/cat1/_record_target.xml
// exporter/templates/cat1/_telecom.xml
// exporter/templates/cat1/cat1.xml
// DO NOT EDIT!

package exporter

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesCat1_addressXml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x8f\x3d\x0a\x03\x21\x10\x85\x7b\x4f\x31\xec\x01\xdc\x0b\x18\x21\x6c\x9b\x6e\x49\x93\x4e\xe2\x10\x84\xa0\x8b\xba\x45\x18\xe6\xee\xf1\x67\x8a\x40\xac\x66\xbe\x37\xef\x3d\x34\xce\xfb\x0c\x67\xc1\xcb\x42\x04\xfa\x5e\x10\x98\x17\xab\xa0\x3d\xa2\xec\xe2\x0b\x41\xef\x35\x23\x56\xe6\x41\x01\x4c\x19\xfb\xb5\x39\xb1\x94\x5b\x88\x68\x89\x34\xb3\x59\xff\x05\x09\xc2\xe8\xc5\x6e\x9e\xa1\x7e\x6c\xef\xda\xda\x00\xdd\x35\x88\x92\x64\x57\x71\xa8\x7b\x9f\x60\x86\x76\x36\xf5\x23\xb5\xed\xbd\x25\x3f\x8f\x1e\xe1\x18\x27\x3f\x58\x4a\xd2\x19\x6b\x96\x9e\x39\xcf\x2a\xe1\xca\xac\xfd\xe3\x56\x7d\x03\x00\x00\xff\xff\x70\x10\x66\xec\x00\x01\x00\x00")

func templatesCat1_addressXmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesCat1_addressXml,
		"templates/cat1/_address.xml",
	)
}

func templatesCat1_addressXml() (*asset, error) {
	bytes, err := templatesCat1_addressXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cat1/_address.xml", size: 256, mode: os.FileMode(420), modTime: time.Unix(1452025204, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCat1_authorXml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x52\x4d\x4b\xc4\x30\x10\xbd\xef\xaf\x18\x7b\x14\x9a\xe2\xbd\x16\x0a\x22\x0a\xbb\x2a\xb8\x17\x4f\x32\x6e\xa6\xdd\x40\x9b\x2c\x49\x5a\x3f\x4a\xff\xbb\x69\xd2\xed\x6e\xd7\x82\xb7\xcc\xbc\x37\x2f\x2f\xf3\x92\x5e\xc5\x31\xbc\x3e\xe4\xeb\x35\xec\xb1\x25\xb8\x61\xec\x1a\xb0\xb1\x7b\xa5\x19\x6c\xf2\x37\xf8\x20\xe0\xd4\x8a\x1d\x81\xd2\x70\x20\x6d\x94\x64\x10\xc7\xd9\x2a\x0d\xac\x6c\x05\x90\x5a\x51\x13\xb4\x58\x35\x74\x1b\x75\x1d\xdb\xba\xb2\xef\x23\x48\x3c\x88\xc6\x88\x52\x12\xcf\x27\x7e\xd7\x69\x94\x25\x01\x7b\xe4\xa6\xef\x5d\x63\x68\x59\xaa\x0f\x15\x5a\x82\xe8\x5d\x70\xf6\x55\x57\x11\x30\x0f\x76\x1d\x49\x3e\x9e\xc6\xb9\x9c\x73\x4d\xc6\xd0\xe2\x34\x06\xf0\x1f\x89\x2d\x55\xb4\x53\xf5\xa2\x82\x0d\xd8\x92\x82\x3f\x8a\x02\xd8\x4b\x58\xc5\xbd\xd0\xc6\x8e\x1a\xd3\x4b\x03\x96\xf9\xa6\x6b\x4b\xac\xe9\x58\xb8\xb2\x14\x2d\xc9\xcc\xad\x69\x2e\x91\x26\x01\x38\x11\x0b\xac\x45\xf5\x7d\xc6\x5c\x63\x20\x8e\xc0\x51\x3f\x39\x5d\x90\x26\x7f\x3d\x38\xeb\x95\x21\x18\x4c\xdf\xf9\x24\xd9\x46\x71\xaa\x2e\x4d\x87\x78\x84\x2c\x03\x69\xf2\x91\xd6\x28\x9b\x02\x77\xb6\xd1\xa4\xfd\xe4\xd3\x70\x9d\x73\x35\x57\x4b\x93\x65\xe2\xa4\x63\x54\x61\x3f\x51\xd3\xc5\xf8\x50\x0e\xd3\x33\x78\x05\xf3\xd7\x2c\x98\x9b\x25\x72\x16\x9e\xd2\x25\x4a\xf1\x83\x56\xb8\x8d\x85\x04\x9f\xcf\x5a\xfe\xd9\x97\xc2\xee\x37\x27\xc7\xef\xfc\x1b\x00\x00\xff\xff\x43\xb1\xa7\x90\x12\x03\x00\x00")

func templatesCat1_authorXmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesCat1_authorXml,
		"templates/cat1/_author.xml",
	)
}

func templatesCat1_authorXml() (*asset, error) {
	bytes, err := templatesCat1_authorXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cat1/_author.xml", size: 786, mode: os.FileMode(420), modTime: time.Unix(1452025204, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCat1_idXml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb2\xc9\x4c\x51\xa8\xae\xce\x4c\x53\xd0\x0b\xca\xcf\x2f\xa9\xad\x2d\x02\x92\xb6\x4a\xd5\xd5\x50\x2e\x90\x95\x9a\x97\x52\x5b\xab\x90\x5a\x51\x92\x9a\x57\x9c\x99\x9f\x07\x96\x74\x85\xf1\x80\x2a\x14\xf4\xed\xb8\x00\x01\x00\x00\xff\xff\xc7\x76\x77\x01\x46\x00\x00\x00")

func templatesCat1_idXmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesCat1_idXml,
		"templates/cat1/_id.xml",
	)
}

func templatesCat1_idXml() (*asset, error) {
	bytes, err := templatesCat1_idXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cat1/_id.xml", size: 70, mode: os.FileMode(420), modTime: time.Unix(1452025204, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCat1_measuresXml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x56\x6f\x6f\xfa\x36\x10\x7e\xbf\x4f\xe1\x45\xda\x9b\x6a\x18\x02\xfd\xc3\xaa\x80\xd4\x41\xbb\x22\x51\x10\xd0\xf6\xbd\x89\x8f\x12\x29\x38\xcc\x71\xba\x31\xc4\x77\xdf\x39\x89\x13\x87\x40\xdb\x75\xbf\x0a\x55\x71\x72\xbe\xe7\x9e\xbb\xc7\x4f\xe2\xf9\xd1\x66\x1b\x09\x10\xaa\xff\x13\x21\x5e\x0c\xbe\x0a\x22\xa1\xaf\x71\xf5\x73\xa3\x91\x5e\x10\x72\xf1\x7f\xff\xf2\x3c\x4f\xc0\xe2\x44\x02\x59\x64\x38\x3f\x34\x7b\xa3\x51\x96\x4d\x9e\xd7\x41\x4c\xf0\xa7\xd6\x40\x14\x6c\xb6\x21\x53\x30\xe2\x64\x15\xc9\xe3\x1a\xca\x7d\x56\x9c\x8c\x22\xd5\x73\xda\xd4\xbd\xa6\xdd\xcb\x16\x75\xa9\xeb\x76\xba\xdd\x0e\x75\x5b\xb4\x8d\xbf\x4b\xda\xa6\x6d\xa7\xf9\x3d\xbc\xd9\xf0\xe9\xbb\x98\x9d\xb3\x98\xe3\xe9\x68\x32\x20\x7e\xc4\x21\xc5\x74\x0c\x28\x8f\xfc\x64\x83\xd3\x75\x68\x16\x1e\x2b\xb6\xcb\x76\xc4\x6c\x93\xc5\xb2\x30\x24\x9b\x3c\x3c\x9f\x3f\x91\xf0\x67\x12\x48\xe0\x64\xb9\x23\xb3\xf9\xf0\x4e\xef\x13\x9c\x49\x5e\x56\x9e\x62\xe9\x7f\x3d\xe7\xea\xca\xed\x5e\x37\x5c\x27\x5d\x2e\x76\x31\x92\x3a\x45\xe4\x9a\xba\x45\xfd\x2a\x50\x21\xf4\x8f\x5a\xe3\x35\xb3\xdb\xa6\x35\x7f\xab\x7e\xae\x10\x4f\xb1\x65\x08\x64\x19\x49\x0e\xb2\xe7\x20\xd4\x5f\x01\x57\x6b\xbc\x6a\xb5\x7e\x71\x4c\x94\x8e\x5b\x03\xe3\xe5\x5a\xdf\x91\xf6\x32\x0d\xe9\x83\x01\x7e\xd6\x78\x08\xbb\xae\xc7\xbc\x82\x8c\x75\x2b\x26\x90\x28\xc9\x42\x32\xe2\xd8\xc6\x60\x15\x80\x3c\x1d\x5f\xe4\x2c\x36\x26\x9b\xe5\xb9\x60\x13\xb3\xd8\x82\x8f\x39\xfd\x0f\xb2\xe3\xda\x62\xa0\x9f\x56\x18\x7a\x6a\x19\xf1\x9d\xbd\x61\xbf\x97\x4c\xbc\x01\xa1\x87\xc3\xc7\x7d\xe0\xfd\xfd\x9e\x4e\x50\x06\x87\x03\xa6\xe5\x27\x1f\x3f\xce\x9e\x1e\x16\xa0\x46\xc3\x4f\x62\x72\x42\x19\xe7\x4f\x62\xcf\x27\x3b\xbe\x5b\xe5\xae\xa9\x81\xe0\x16\x2d\x7c\x6e\xb3\xc7\xa5\x96\x49\xae\x9f\x66\x29\xa0\xf4\xb8\xb8\x94\x5e\x90\xa9\x7c\x63\x22\xf8\x07\xab\xfd\x95\x00\xf3\xd7\x28\x59\xa1\x58\x20\x02\xf1\x46\x18\xca\x7e\x05\x12\x84\x8f\x67\x38\x22\x4c\x90\x62\xa6\x46\xf5\xc7\xbd\xf5\x70\x6a\xb2\xc4\x8f\x4c\x76\xe2\x87\x2c\x8e\x07\xe9\xe9\x18\x8c\x5f\x16\xcf\xf7\x73\x87\x6c\xa2\x88\x67\xb7\xee\x5f\x27\xb6\x68\xbf\x68\x20\xf3\xa2\x3a\x53\x4e\xd6\xb7\xff\x60\x21\x1d\xfa\x5b\xd7\x9c\xc1\xaf\x40\x43\x1d\xdb\xb6\xaf\xef\xe0\xdf\x54\xf0\x03\x4e\x70\x4a\x20\xb4\x78\x7a\x0e\x0a\x44\x8b\xa3\x12\x81\xce\xa3\x92\xb4\x95\xb9\xdb\xe8\x37\x56\x08\x0a\x78\x8d\xc8\xa0\x9c\x65\x10\xff\x8e\x93\xc2\xf9\xea\xec\x52\xe0\xf9\x2d\x66\x1b\x57\xcb\xb7\x66\xbe\xdb\x42\x36\x9f\xf9\xfd\xc3\xdc\xa9\x08\xd1\xa4\x19\xe6\x7e\x6a\x0f\x78\x38\x1d\x9c\x1f\x6e\x51\xdc\xe2\xf1\x6e\x3c\xbe\xad\x34\xfb\x3d\x77\x81\xd8\xb8\x40\x50\xb8\x40\xa5\xfb\xb7\x64\x96\xb0\x30\x50\xbb\x7c\x6d\x8a\x68\x62\xf7\x02\xa5\xb3\x31\xf2\xc7\xcb\x68\x68\xf3\x32\xdd\x3d\x37\x92\x4b\x7a\xd3\xe9\x3a\x47\xcd\x37\xa7\xd3\xee\xac\x45\x60\xfa\x32\x1e\x56\xd5\xa2\xed\x93\x44\xab\x74\x51\x3b\x2c\x96\x42\xf0\x20\xda\x5e\x63\x39\x7b\x0d\xe0\x16\x5f\x42\x0a\xb5\x94\x43\x14\x59\x4d\xb3\x44\xee\xc7\xc8\xad\x8e\x94\x6d\xcd\x38\x57\xdd\xeb\x24\x25\x9b\x4b\x8c\xaf\x3c\xdd\x7d\x4c\x5d\xb3\x72\x91\xda\x5a\x1d\xee\xdd\x76\x3d\xf2\xce\xc2\x04\x0a\xdc\x23\x47\xac\xe2\x7b\xcd\x63\x41\xd9\x16\x5f\x48\xb2\x34\xb6\xc2\x59\x8c\xb9\x59\xc6\x53\xba\xa2\xd7\x2c\x3e\xe0\xbc\xa6\xf5\x65\xf7\x6f\x00\x00\x00\xff\xff\x6f\x5b\x29\x26\xe6\x09\x00\x00")

func templatesCat1_measuresXmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesCat1_measuresXml,
		"templates/cat1/_measures.xml",
	)
}

func templatesCat1_measuresXml() (*asset, error) {
	bytes, err := templatesCat1_measuresXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cat1/_measures.xml", size: 2534, mode: os.FileMode(420), modTime: time.Unix(1452097451, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCat1_organizationXml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x90\xc1\x6a\xc4\x30\x0c\x44\xef\xfd\x0a\x75\xef\xce\xfe\x80\x59\x28\x3d\xed\x65\x0f\x25\xf7\x22\x62\x35\x08\x12\x39\x6b\x2b\xd0\xd6\xf8\xdf\xeb\xd8\xd0\x76\xc1\x37\x4b\x63\xcd\x3c\xc6\xa6\x34\x8c\x38\xdf\x70\xa5\x9c\x2f\x4f\x00\xf6\xd9\x18\x78\xa3\x2d\x50\x24\xd1\x08\xbb\xf0\x7d\x27\x08\x34\x73\xd4\xf0\x05\x3e\xcc\x28\xfc\x8d\xca\x5e\x60\xbc\xde\xc0\x98\xe3\x2c\xa5\x80\x32\x13\x0c\x57\x17\x73\x2e\x8b\x63\xa5\xb4\x6e\x0b\x2a\xc1\xe9\x9d\xdd\xf0\xb9\x2e\x27\x18\xaa\x98\x12\x89\xab\xaf\x1a\xf7\xea\x45\x91\x25\x82\x14\x0c\x30\x10\x37\x9a\xf8\x83\xa7\xbf\x54\xf1\x5a\x86\xfb\xce\x81\x5c\x0b\xb4\xc7\xdf\x4b\xa1\x6f\xe8\xf6\x5c\xe7\xff\x24\x23\x2d\x34\xf9\xb5\x8b\xa3\x4d\xeb\x33\xfd\x3a\xbc\x38\x57\x6a\x88\xd4\xb5\xc0\x26\xf6\x2c\xec\xf9\xb1\xd5\x9f\x00\x00\x00\xff\xff\xf2\x1b\x72\xb3\x65\x01\x00\x00")

func templatesCat1_organizationXmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesCat1_organizationXml,
		"templates/cat1/_organization.xml",
	)
}

func templatesCat1_organizationXml() (*asset, error) {
	bytes, err := templatesCat1_organizationXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cat1/_organization.xml", size: 357, mode: os.FileMode(420), modTime: time.Unix(1452025204, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCat1_providersXml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x55\x4d\x6f\xda\x40\x10\xbd\xf3\x2b\xa6\x3e\x07\x1b\x03\x21\x39\xb8\x96\x2a\x87\x48\xb9\x10\x2b\xe5\xd2\xe3\xca\x3b\xc6\xab\x9a\x5d\xba\x5e\x93\xa6\x88\xff\xde\x59\x83\x13\x1b\x5c\x90\xa3\x22\x0e\xf6\xee\x7c\xbd\x37\xf3\xc6\x01\x57\x49\xb9\x46\x69\x98\x11\x4a\x3e\xa7\x60\xde\x36\x18\x29\x8e\x5f\x9d\x87\xe7\xc8\x09\x07\x00\x41\x81\x7a\x2b\x12\x9c\x6f\xc9\x0c\x92\x9c\x15\xc5\xc1\x20\x8e\xe2\x17\x27\x84\xe0\xcb\x70\x08\x09\xd3\x08\x1b\xad\xb6\xa2\xa0\x38\x30\x1c\x5a\xcf\xdd\x4e\xa4\xe0\xc6\xf6\x94\xa3\x8e\x51\xa7\x4a\xaf\x99\x4c\xb0\xd8\xef\xe9\xda\x1a\x68\x26\x57\xd8\x6d\x03\x47\x23\xaa\x00\xd3\x14\x13\x23\xb6\xb8\x14\x6b\x0c\x8f\xa7\x74\x9e\xab\x57\xd8\xb2\xbc\xa4\x62\x76\x3b\x43\x77\x4b\x15\x71\xf6\x68\x23\x18\x70\xbf\x1b\xa6\xcd\x03\x33\xb8\xdf\x3b\x5e\xc3\x2b\x13\xab\xec\x82\xdb\x5c\xf2\x53\xa7\xc0\xeb\xac\xa0\x42\xfe\x43\x95\x84\x5e\x82\x90\x49\x5e\x72\x84\x75\x99\x1b\xb1\xc9\x89\x8d\x03\x16\xd4\xc5\x0d\x20\x4b\x32\x78\x15\x26\x03\xb2\x5c\xc4\x4f\x37\xb0\x7c\x5a\xdc\x40\x14\x2d\xdc\x23\x57\x55\xbc\x77\x97\x46\x1b\xe2\x97\x47\xa7\x51\xbc\x69\x31\xf0\x59\x0e\x3e\xc5\x82\xe5\xa1\x9d\x3e\xa0\x59\x10\x2b\x89\x7c\x2e\x8d\x30\x6f\xcd\xf8\x67\xad\x75\xa3\x87\x6f\x4f\x9c\x46\x48\x70\x41\x9c\xbc\x37\xb7\x36\xa7\x51\x91\x64\xfe\xa2\x94\x01\x67\xec\xfa\x33\xf7\x7e\x3a\x72\x7d\xd7\xf7\x27\xf7\xf7\x13\x77\xea\x8e\x9d\x13\x1f\xca\x2f\x38\x68\x72\xb0\x08\x2a\x4f\x2a\x17\xf0\xb7\x41\x69\xa7\xb0\x3a\x9d\xd7\x6f\xf6\xaa\xc5\x80\x4d\x8a\x92\xb7\x82\x9e\x9f\x04\x1a\x37\x1a\x0b\xaa\x1b\xf9\xb3\x5e\x31\x29\xfe\x54\x52\x39\x8d\xd4\x0b\xed\x11\x2f\xfe\xea\x89\xb7\x89\xb8\xdb\xa5\x07\xfa\x2e\xb4\x9d\x0c\x78\x57\x29\x08\xbc\xee\x41\x08\xbc\xf7\x89\x0e\x07\xed\xe8\xf4\x94\x17\x58\x3d\x56\x32\x5a\xa8\xc3\xfa\x20\xee\x80\x33\xc3\x20\x55\xa5\xe4\xa4\x2a\x30\x19\x69\x89\x12\xda\xed\xa3\x31\x51\x9a\xd7\x79\x37\xa5\x31\x42\xae\xac\x11\xd9\xb3\x9f\xf8\x11\xe2\x20\xaa\xae\xc5\xd1\x14\xcc\x78\x34\x1a\x8f\xee\xfc\x59\x3d\xe3\x57\x44\x61\xdf\x17\xea\xb5\xd6\x44\xc7\x56\xf8\x9f\x1b\xe1\xca\x36\x68\x6d\x82\x4b\xa0\xfa\xc2\x6a\xcb\xfc\x1f\x12\xaf\x80\x2e\x33\x51\x00\xfd\xab\x0e\xd5\xcc\x13\x96\xe6\x4a\xbb\x38\xaf\xb3\xd6\xbc\xfa\xf5\xaf\x31\xaa\xd7\xe5\x77\x56\x89\x6a\x98\x59\x52\x1b\xd5\xf4\xd3\x8f\x3f\x9e\x4c\x6f\x67\x77\x2d\xe1\x5c\xce\x46\xdd\xeb\x91\x6d\x32\x69\xe3\xbf\x9d\x4e\xc6\x2d\xec\x97\x85\xd7\x25\xba\x13\xc1\x7d\xc8\x2d\xf0\x9a\x5f\xf1\x70\x10\x78\x27\x1f\xfe\x70\xf0\x37\x00\x00\xff\xff\x46\x95\x5a\x17\x0b\x08\x00\x00")

func templatesCat1_providersXmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesCat1_providersXml,
		"templates/cat1/_providers.xml",
	)
}

func templatesCat1_providersXml() (*asset, error) {
	bytes, err := templatesCat1_providersXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cat1/_providers.xml", size: 2059, mode: os.FileMode(420), modTime: time.Unix(1452097451, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCat1_record_targetXml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x56\x4d\x6f\xe2\x3c\x10\xbe\xf7\x57\x58\xb9\xbe\xaa\xf3\xd5\x96\xbc\xab\x14\x89\x66\xfb\x81\x44\xbb\x08\x58\xad\xb4\x37\x17\xbb\x60\x29\xb1\x91\xe3\x54\xed\x46\xfc\xf7\x1d\x27\x01\x9c\x26\x2c\x87\x55\xf7\xd2\xda\x33\x4f\x9e\x99\x67\x32\x33\x24\x56\x6c\x29\x15\x5d\x10\xb5\x62\x7a\x78\x86\x50\xbc\x21\x9a\x33\xa1\x67\x32\x65\xe6\x8e\x50\x59\xf2\x17\x84\x1f\x19\xe5\x4b\x92\xce\x2a\xf8\x53\x91\x3d\x33\xb5\xdd\x56\xfe\x5e\xc4\x28\xcf\xf9\x4a\x58\x18\x60\xe6\x14\xb1\x37\xcd\x44\xce\xa5\xb8\x76\xca\xb2\x9f\xd3\x41\x4a\x4a\xdd\xf5\x1f\x18\x1d\xe4\x0e\xf7\x91\x59\x9a\xb3\xe3\x41\xfc\x20\xbc\xb8\xdc\x31\x4e\x53\xb2\x64\x6b\x99\x52\xa6\xbe\xa9\x15\x11\xfc\x17\x48\x95\xa2\x4d\x27\x68\xc3\xf6\x81\xfa\x6f\x88\x6d\xda\x98\x50\xaa\x50\x91\xb3\x6b\xe7\x61\xea\x0c\x5b\x15\x1c\x81\x8b\xe5\x39\xcb\x2d\x41\x65\xa9\x88\x58\xb1\x7e\xa7\xe5\x9e\x6b\xc5\x98\x6e\xf9\x20\x58\x5e\x59\x9b\x47\x27\x5c\xb0\x21\x94\x75\xbb\x8d\xdd\xae\xa3\x45\x7a\xc8\xb7\x21\x5a\x72\xfd\x6e\x9e\x4d\xe0\xbf\x79\xbe\xba\x9f\xb5\x22\x11\x5d\xb1\xcf\xcd\xa1\x0e\x61\x2c\x36\x66\x23\xc1\x96\x26\x92\x56\xc0\x9f\x7c\x63\x60\x96\xb1\x15\x50\x16\x42\xab\x3a\x66\x7d\x44\x55\xdc\xc6\x7c\xd6\x9f\x6b\xb7\x1f\xba\x42\x03\x2f\x40\x37\x85\x4a\xb9\x58\x69\x29\xd0\x8c\xe2\x3f\x96\xa3\x96\x7e\xc3\xe8\x0b\x34\xe1\x47\xe1\x8d\xec\xc7\x51\x47\xae\x2d\xd6\xf3\x07\xa1\xd7\xaf\x74\xaf\xf3\xfb\xbc\x23\xae\xd5\x36\xae\xe9\x9b\xda\x13\x6b\x96\xc2\x48\x64\x75\x17\xfd\x98\x3a\xe8\x95\xa4\x05\x1c\xc1\xfe\xe5\x3f\xff\x7c\x10\xf9\xe7\xc1\xc0\x3f\x0f\x3d\xcf\x73\x9a\x16\xdc\x8d\xf5\x8e\x3b\x16\x24\xb3\xd3\x58\xf1\x57\x26\x4c\xb1\xef\xb8\xca\xb5\xa9\x74\x6d\x39\x20\x5e\x48\xc6\xd3\xea\x7d\x4c\x48\x8d\x68\x2c\x3b\x46\xd7\xa6\x84\x36\xcf\xb8\xe0\x50\x57\x88\xfb\xca\xee\x41\x09\x53\x46\x3a\x5a\xc2\x9f\x6a\xba\x6b\x9b\x19\x67\x63\x9a\xbf\xe7\x9a\x65\xd7\x4e\x80\xfd\x2b\x1c\x5d\x78\xd8\xc7\xbe\x1f\x46\x51\x88\x2f\xb1\x6f\x43\x9e\x20\x0a\xcc\xce\x64\x80\x46\x3d\x21\x9c\xfd\x2c\xc7\xcf\x5c\xe9\xf5\x82\x67\x6c\x57\x9e\xb2\xd4\x70\x5b\xc8\x84\x92\x3b\xa9\x32\xa2\x11\xbe\x31\x18\x5a\x35\xac\xe3\xb6\x87\x71\x06\x33\x6d\x37\x92\x82\x7b\x5b\x80\x41\x60\x63\x32\x1a\x0e\x0f\x61\x93\x21\x34\x2b\xe5\xf9\x26\x25\xef\x75\xbe\x3b\xb8\xb9\x01\xbc\x79\xb5\x1d\x59\xc9\xd7\x04\x19\x1c\x22\x82\xa2\x5b\xbd\x16\xdc\xf4\xdb\xa9\x0a\x5d\xe1\x20\x8c\x9c\xde\x2d\xb6\x53\xb3\xe7\x42\xb6\x26\x56\x59\xef\x95\x2c\x36\x6d\x69\x7b\xb8\xa5\x0f\xb5\x78\x8e\xa9\xec\x00\xfe\xbd\xd6\x09\x6c\xc4\x82\xac\xfa\xd7\x68\x9f\x13\x2a\x91\x36\xe6\x44\x66\x59\x01\x99\x54\x0b\x7c\xd8\x5e\xa6\x90\x11\x48\xd5\x6c\x4c\x9b\xbd\xdf\xcd\x2e\xc4\x51\x04\x67\x0c\xc7\xc0\x41\xa4\xfa\xc9\x82\x3d\x33\x2a\xf4\x5a\x2a\x50\xd7\x34\xef\x78\x31\x9f\xba\x49\x14\x1e\x74\x1c\x0b\xe1\x63\x23\xd9\xc7\x17\x26\xc6\xff\xe1\xc0\x9c\x2f\xc1\xe6\xe3\xc0\x8c\xc5\xb1\x08\xe3\x87\x5b\x77\x9a\x24\x1d\xfe\x83\x4c\xeb\x6d\x73\x18\x9c\x37\x54\xbd\xe9\x1c\x39\xe3\xdb\xc5\x9d\x83\x3c\x64\x4f\x44\x3d\xdf\x27\x6a\x74\x6a\x13\x9f\x2c\xf1\xa7\x17\xf8\x73\xcb\xdb\x57\x5c\x26\x6c\xcc\x89\x12\xb6\xf7\xbd\xb5\xb0\xf7\x97\xfa\xa3\x2c\x76\xdb\x1f\x6d\xbf\x03\x00\x00\xff\xff\x2c\x82\x07\x54\xc4\x09\x00\x00")

func templatesCat1_record_targetXmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesCat1_record_targetXml,
		"templates/cat1/_record_target.xml",
	)
}

func templatesCat1_record_targetXml() (*asset, error) {
	bytes, err := templatesCat1_record_targetXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cat1/_record_target.xml", size: 2500, mode: os.FileMode(420), modTime: time.Unix(1452025204, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCat1_telecomXml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb2\x29\x49\xcd\x49\x4d\xce\xcf\x55\x28\x2d\x4e\xb5\x55\xaa\xae\xd6\x0b\x2d\x4e\xad\xad\x55\x52\x28\x4b\xcc\x29\x05\x0a\x00\x65\xad\xb4\x81\xa2\x61\x20\x2e\x48\x5c\xdf\x8e\x0b\x10\x00\x00\xff\xff\x58\x0a\x19\xbe\x33\x00\x00\x00")

func templatesCat1_telecomXmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesCat1_telecomXml,
		"templates/cat1/_telecom.xml",
	)
}

func templatesCat1_telecomXml() (*asset, error) {
	bytes, err := templatesCat1_telecomXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cat1/_telecom.xml", size: 51, mode: os.FileMode(420), modTime: time.Unix(1452025204, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCat1Cat1Xml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x58\x59\x73\xe2\x46\x10\x7e\xf7\xaf\x98\xe8\x29\x49\x15\x12\x97\x6d\xd6\x25\xb3\xc5\x02\x1b\x53\x65\x30\x0b\x38\xc7\xd3\xd6\x58\x6a\x60\x6a\xa5\x11\x91\x46\x60\xe2\xf2\x7f\x4f\xcf\xe8\x1a\x89\xc3\x4e\xb2\x8f\xd9\x72\xd5\xca\xad\x9e\xaf\xaf\xaf\xbb\x47\xb6\x3f\x3e\xfb\x1e\xd9\x42\x18\xb1\x80\xdf\x1a\x0d\xb3\x6e\x10\xe0\x4e\xe0\x32\xbe\xba\x35\x62\xb1\xac\x75\x8c\x8f\xdd\x0b\xbb\xef\x31\xce\x1c\xea\x0d\x02\x27\xf6\x81\x0b\x82\xc7\x78\x74\xf3\x1c\xb1\x5b\x63\x2d\xc4\xe6\xc6\xb2\x76\xbb\x9d\xb9\x6b\x99\x41\xb8\xb2\x9a\xf5\x7a\xc3\xfa\x7d\x7c\x3f\x77\xd6\xe0\xd3\x1a\xe3\x91\xa0\xdc\x01\xe3\x22\x39\x86\xc0\x21\xbf\x59\x7b\xd7\x35\x54\xbe\xd9\xb6\x32\xf9\xcd\x36\x70\xaa\xef\x2c\x94\xe5\xef\x23\x57\x54\x14\xa4\xc4\xe8\x5e\x10\x62\xff\x50\xab\x91\x2f\xb3\x41\x8f\xdc\x01\x75\x21\x24\xb5\x9a\x12\x87\x40\x3d\xbf\x1f\xb8\x40\x30\x28\xb8\x35\x1e\xe7\x86\xa5\x5e\x88\xfd\x06\x46\x2e\x09\x83\x40\xdc\x1a\x4d\xb3\x71\x65\x76\xda\x75\xb3\x61\x36\x1a\xad\x4e\xa7\x85\x0f\x2d\xcc\xc4\xb3\x00\x9e\x64\x66\xfa\xd0\x1f\x7c\xbd\x1b\xd4\xf1\x5f\xbb\x9e\x42\x48\x93\x8f\x73\x32\x93\x26\x32\xb3\x0b\xf0\x37\x1e\x15\x40\x10\x3b\x75\x41\xa4\xa2\x73\xd6\xea\x66\x13\x7f\x9a\x52\xa2\x81\xab\x78\xb4\xe3\xff\x18\xb0\xad\x00\x89\x86\x38\x18\xd7\x9e\x68\x04\xee\xf7\xc1\x6e\xea\xd8\x8b\x35\x8b\x08\xfe\x88\x35\x90\x95\x17\x3c\x51\xcf\xdb\x93\x98\xb3\x3f\x63\x20\xcc\x45\xd2\xb0\x25\xc3\x0c\x2d\x83\x10\x55\x50\x4f\x79\xe0\x66\x84\x4a\xed\xb3\xcc\xee\xcb\x0b\xe1\xb0\x9b\x51\xee\x06\x3e\x79\x7d\xad\x66\x25\x3f\x27\xeb\xa8\x6a\x9b\x21\x38\x45\xb1\x2f\x2f\x1b\x9d\x66\x0d\x29\x2d\x7f\x9d\xef\x23\x0c\xee\x58\x40\x57\x32\x47\x85\xca\x84\xfa\x78\xf6\xfe\x61\x34\xe9\x1b\xc4\x65\x11\xe6\x63\x9f\xc8\xbe\xc4\xd4\x63\x62\x4f\xc6\x40\xa3\x38\x04\xac\xfc\x26\x08\x45\x46\x28\x26\x3c\xe8\x2a\xe7\x46\xdc\x91\x01\x3b\x99\x86\x6d\x25\x2f\x8f\x65\x2a\x0f\xc4\x41\xaa\x0a\xe4\x1a\x11\xcc\xcf\x83\x81\xe5\x12\x1c\xc1\xb6\xb0\x90\xc2\x2d\xf5\x62\x50\xa9\x91\x3a\x93\x60\x57\x24\xc6\x09\xf8\x32\x49\xb2\x72\x51\x63\xfc\xe4\xad\xf0\x2f\xcd\xe6\x65\x8a\xe2\x51\xbe\x8a\xe9\x0a\xb4\xe3\xc0\xb5\xd4\x87\x2a\x1c\x64\xcf\x06\x5d\x2d\xaa\x46\xc8\xcb\x4b\x46\x1c\x62\x7c\x0d\xc1\x09\x42\xf7\xab\xa0\xe1\x0a\x84\x89\xad\x6b\x10\x73\xa6\x64\xaf\xaf\x17\xa9\x3a\x5b\x12\x33\x69\x19\x94\x25\xa2\x10\x8d\x43\x26\x35\x7b\xb1\x58\x07\x61\x94\xbe\xad\x58\xa0\xea\x65\x0a\x9d\x03\x00\x77\xd3\x67\xe5\xec\xfc\xae\x77\x7f\x4f\xd6\x74\x0b\xa4\x61\x9a\x3f\x93\xf4\x10\x19\xf7\xfe\x20\x4f\x98\x78\xd8\x32\xac\x10\xb2\x71\x83\xe3\x2f\xe0\x66\x6a\x68\x81\x45\x49\x54\x49\xb0\x54\x25\xea\xeb\x7c\x63\x3c\x61\x2f\x3c\x53\x74\x07\x64\x19\x69\x86\x45\x85\x7c\xa6\x82\x92\x28\x7e\xf2\x59\x24\x47\x07\x0e\x57\xa4\x70\x68\x85\xb0\x62\x91\x08\xf7\xa6\xca\x59\xe1\xa5\x34\xe7\xc4\x91\xc0\x91\x4b\xf9\x71\x8b\x09\x51\x22\xa4\x20\xa1\xc9\xb3\x07\x2b\xea\x29\x2f\x65\xc5\x1d\x2a\xd0\xd9\xd4\x31\x85\x9c\x39\x87\xdd\x23\x6b\x16\x42\x84\x7a\xc9\xd1\xa4\x84\x38\xde\x31\xf2\x15\xe5\xec\x2f\x45\x3a\x33\xaf\xa4\x96\xba\x5c\x94\xfb\xd7\x4d\x73\x64\x53\x8c\x6d\xc5\xc1\xed\x57\xdf\x54\x0a\x55\xb2\x91\x94\x2b\xad\x6f\x7e\xd2\x7c\xd0\x74\xf2\x72\xdb\xd6\x09\x13\xb6\xa5\x79\x53\x4e\xe3\xb1\xac\x9c\x48\x28\x56\x08\x53\x80\x19\x4a\x6a\x4f\x76\xeb\x40\x89\x85\xd4\x4e\x5d\x50\x09\xd7\x03\xc8\xb2\x5f\x94\xab\x42\x06\x33\xe9\x6c\xf0\x40\xd9\xf1\x51\x4f\x32\x2d\xcd\xff\xf9\x1c\x2b\xe7\x7b\xba\xef\x79\xb2\x0f\xb5\xd5\xb8\xd1\x07\x82\xde\x35\x39\x80\x29\x87\x46\x36\x21\x4e\x23\xc9\x34\x53\x81\xf3\x4c\xeb\xfa\xb9\x76\x28\x2b\xc4\x10\x71\xc5\xbe\x28\xb4\x86\x36\x1a\x68\x80\xc7\x7b\xb9\xf0\x6a\xe4\x16\x5d\x7d\x40\x18\xe6\x96\xbb\xba\xda\xd9\x6f\xc3\xf7\x5c\x17\xf3\x1d\xc1\x19\x23\x34\x51\xf9\xaf\x96\x16\x58\x68\x27\xf0\xcf\x18\x12\x89\xc6\xdb\x86\xf2\x24\x4f\x15\x1f\xbb\x1a\xa0\xcd\x91\x87\xba\x40\xca\x56\xb8\x12\x78\xf7\x54\xdd\x13\x10\xf3\x33\x0b\x23\xf1\xfa\x6a\x5b\x89\x76\x05\x62\x49\x7d\xe6\xed\xdf\xc2\xb8\xa7\x09\x44\xaa\xad\xfb\x65\x95\x1c\x2b\x1a\xb6\x1a\xc2\x3b\x07\x42\xd9\xfc\x1b\x43\x41\xe7\xa2\x6d\x1d\xeb\x9d\x0b\x69\x18\x5b\x31\x02\x92\x2d\x85\x64\xaa\xa7\x87\xc4\xf9\x85\xaa\x95\xa4\xa7\x1d\x4b\x59\x8f\xb7\x14\xed\x6e\xd8\xdf\xcb\x0e\x8f\x8c\xd3\x37\xa6\x0f\x26\x6e\x58\xbd\xe7\x24\xc8\x64\x3a\xd2\x45\x65\xcc\xcf\xf4\x1b\xa0\xc2\x69\xcc\xb6\x79\xa5\xf7\x28\x32\x5a\xeb\x4c\x5c\x34\x00\x22\xed\x84\x7b\xc6\xa1\xdb\xac\x37\xc9\xa7\x38\xc4\x6b\xfc\x4a\xe0\x24\x9b\xb9\xa6\x6d\x1d\x6a\x15\x08\x8e\x4c\xef\x27\x70\xf1\xb6\xe6\xe2\xc8\x2d\x37\x3e\x5e\xe7\x05\x74\xc7\x3d\x09\x21\x9f\x8a\x37\x9b\x00\x25\x9e\x1c\x24\xdd\x7a\xe3\xba\x55\xb7\x2d\x4d\xa2\xa1\x07\x31\xc7\x5d\xd8\x7d\x9c\x23\x76\xfa\x5c\xd4\x58\x8b\xc5\x4e\x3b\x88\xc4\x11\xd6\xe9\xb7\xa9\x91\x95\x0c\xe5\x37\x3f\x5e\x77\x1a\x3f\x35\xaf\x1b\xb5\x16\xde\xca\x8f\x0c\xac\xa4\x70\x18\xf1\x40\xad\x67\xcd\xbe\x4f\x79\xbc\xa4\x8e\x1c\x7a\xe1\x18\x5d\xf3\xe4\xfd\xae\x9b\xd6\xd1\xb6\x8e\xbe\x26\x7a\x02\x82\xa5\xd8\xd1\x10\xca\xc7\x74\x29\xe9\x1e\x70\xb6\xe2\x0e\xc9\xd8\x7b\xc8\x33\x94\x15\xcf\x95\xe5\x7b\x7a\xf5\xda\xf9\xa6\xd7\x5e\xea\x7d\xa4\x05\xc0\xce\x5c\xef\x15\x59\x35\x5d\xae\x05\x89\xdf\x37\xb8\xd3\x06\xe0\x7c\xab\xb4\xff\xbf\xaa\xd4\x01\x71\xbf\x07\x75\xdf\x20\xef\x39\xfa\xbe\x9b\xc0\xe7\x29\x7c\x40\x62\xeb\x7d\x95\x39\x71\xe7\x29\xdd\x78\xce\xdc\x14\xde\x31\xd2\xce\xae\xfa\x13\x8b\xbe\xe0\xca\x93\x53\x6f\xd0\x4b\x17\xab\x48\x5b\xed\x5a\xbb\xd9\xb9\xaa\x75\x9a\x8e\x53\x6b\xb7\xe0\xa9\xde\x76\x3e\x5c\x37\xe9\xf5\xff\x33\xe9\xfc\x4c\xaa\x2e\xc7\xc3\xed\x9e\xee\xf6\x3b\xe0\xe1\xfe\xd8\xea\xce\x16\xf7\x1c\xf0\xcd\xe1\x62\x2e\xf5\xe5\xa9\xa5\xac\x8f\x8a\xef\x3c\x21\xca\x73\xa1\x44\xfd\x73\x8c\x2f\x38\x77\x7c\x9d\x17\x57\xa6\xec\x5b\x74\x3a\x7b\xf8\x75\x34\x18\xce\xe6\x64\x36\x9c\xe0\xff\xe4\x6e\x38\x1b\xa6\x0b\xb5\x74\xe5\xd8\x84\xc1\x16\x3f\x8d\xc3\xa8\xfa\x29\xaa\x8a\xee\x6f\x02\x8e\x76\xb2\x06\x11\x61\xac\xe6\xbe\xfb\x29\x70\xf3\xac\x96\xe0\xfc\xe4\xe3\x3f\x43\x4b\xff\x16\x50\x5c\x02\xa5\x73\xe3\x61\x6f\xfe\x38\x1b\x96\x5c\x2b\x6f\xff\xd9\x70\xfa\x30\x5b\x8c\x26\xbf\x90\x69\x6f\xd6\x1b\x9f\xd1\x9c\xf6\x16\xa3\xe1\x64\x41\x06\xbd\x45\x2f\xd5\x9a\x97\xd4\x54\xd3\x54\xbc\x96\x14\xce\x23\xbb\xb0\xad\xea\xdf\xef\xba\x17\x7f\x07\x00\x00\xff\xff\xea\x3f\x63\x10\xfa\x13\x00\x00")

func templatesCat1Cat1XmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesCat1Cat1Xml,
		"templates/cat1/cat1.xml",
	)
}

func templatesCat1Cat1Xml() (*asset, error) {
	bytes, err := templatesCat1Cat1XmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cat1/cat1.xml", size: 5114, mode: os.FileMode(420), modTime: time.Unix(1452097451, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/cat1/_address.xml": templatesCat1_addressXml,
	"templates/cat1/_author.xml": templatesCat1_authorXml,
	"templates/cat1/_id.xml": templatesCat1_idXml,
	"templates/cat1/_measures.xml": templatesCat1_measuresXml,
	"templates/cat1/_organization.xml": templatesCat1_organizationXml,
	"templates/cat1/_providers.xml": templatesCat1_providersXml,
	"templates/cat1/_record_target.xml": templatesCat1_record_targetXml,
	"templates/cat1/_telecom.xml": templatesCat1_telecomXml,
	"templates/cat1/cat1.xml": templatesCat1Cat1Xml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"cat1": &bintree{nil, map[string]*bintree{
			"_address.xml": &bintree{templatesCat1_addressXml, map[string]*bintree{}},
			"_author.xml": &bintree{templatesCat1_authorXml, map[string]*bintree{}},
			"_id.xml": &bintree{templatesCat1_idXml, map[string]*bintree{}},
			"_measures.xml": &bintree{templatesCat1_measuresXml, map[string]*bintree{}},
			"_organization.xml": &bintree{templatesCat1_organizationXml, map[string]*bintree{}},
			"_providers.xml": &bintree{templatesCat1_providersXml, map[string]*bintree{}},
			"_record_target.xml": &bintree{templatesCat1_record_targetXml, map[string]*bintree{}},
			"_telecom.xml": &bintree{templatesCat1_telecomXml, map[string]*bintree{}},
			"cat1.xml": &bintree{templatesCat1Cat1Xml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

