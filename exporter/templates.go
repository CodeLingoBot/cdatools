// Code generated by go-bindata.
// sources:
// exporter/templates/cat1/_address.xml
// exporter/templates/cat1/_author.xml
// exporter/templates/cat1/_id.xml
// exporter/templates/cat1/_organization.xml
// exporter/templates/cat1/_record_target.xml
// exporter/templates/cat1/_telecom.xml
// exporter/templates/cat1/cat1.xml
// DO NOT EDIT!

package exporter

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesCat1_addressXml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x8f\x3d\x0a\x03\x21\x10\x85\x7b\x4f\x31\xec\x01\xdc\x0b\x18\x21\x6c\x9b\x6e\x49\x93\x4e\xe2\x10\x84\xa0\x8b\xba\x45\x18\xe6\xee\xf1\x67\x8a\x40\xac\x66\xbe\x37\xef\x3d\x34\xce\xfb\x0c\x67\xc1\xcb\x42\x04\xfa\x5e\x10\x98\x17\xab\xa0\x3d\xa2\xec\xe2\x0b\x41\xef\x35\x23\x56\xe6\x41\x01\x4c\x19\xfb\xb5\x39\xb1\x94\x5b\x88\x68\x89\x34\xb3\x59\xff\x05\x09\xc2\xe8\xc5\x6e\x9e\xa1\x7e\x6c\xef\xda\xda\x00\xdd\x35\x88\x92\x64\x57\x71\xa8\x7b\x9f\x60\x86\x76\x36\xf5\x23\xb5\xed\xbd\x25\x3f\x8f\x1e\xe1\x18\x27\x3f\x58\x4a\xd2\x19\x6b\x96\x9e\x39\xcf\x2a\xe1\xca\xac\xfd\xe3\x56\x7d\x03\x00\x00\xff\xff\x70\x10\x66\xec\x00\x01\x00\x00")

func templatesCat1_addressXmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesCat1_addressXml,
		"templates/cat1/_address.xml",
	)
}

func templatesCat1_addressXml() (*asset, error) {
	bytes, err := templatesCat1_addressXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cat1/_address.xml", size: 256, mode: os.FileMode(420), modTime: time.Unix(1451941792, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCat1_authorXml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x52\x4d\x4b\xc4\x30\x10\xbd\xef\xaf\x18\x7b\x14\x9a\xe2\xbd\x16\x0a\x22\x0a\xbb\x2a\xb8\x17\x4f\x32\x6e\xa6\xdd\x40\x9b\x2c\x49\x5a\x3f\x4a\xff\xbb\x69\xd2\xed\x6e\xd7\x82\xb7\xcc\xbc\x37\x2f\x2f\xf3\x92\x5e\xc5\x31\xbc\x3e\xe4\xeb\x35\xec\xb1\x25\xb8\x61\xec\x1a\xb0\xb1\x7b\xa5\x19\x6c\xf2\x37\xf8\x20\xe0\xd4\x8a\x1d\x81\xd2\x70\x20\x6d\x94\x64\x10\xc7\xd9\x2a\x0d\xac\x6c\x05\x90\x5a\x51\x13\xb4\x58\x35\x74\x1b\x75\x1d\xdb\xba\xb2\xef\x23\x48\x3c\x88\xc6\x88\x52\x12\xcf\x27\x7e\xd7\x69\x94\x25\x01\x7b\xe4\xa6\xef\x5d\x63\x68\x59\xaa\x0f\x15\x5a\x82\xe8\x5d\x70\xf6\x55\x57\x11\x30\x0f\x76\x1d\x49\x3e\x9e\xc6\xb9\x9c\x73\x4d\xc6\xd0\xe2\x34\x06\xf0\x1f\x89\x2d\x55\xb4\x53\xf5\xa2\x82\x0d\xd8\x92\x82\x3f\x8a\x02\xd8\x4b\x58\xc5\xbd\xd0\xc6\x8e\x1a\xd3\x4b\x03\x96\xf9\xa6\x6b\x4b\xac\xe9\x58\xb8\xb2\x14\x2d\xc9\xcc\xad\x69\x2e\x91\x26\x01\x38\x11\x0b\xac\x45\xf5\x7d\xc6\x5c\x63\x20\x8e\xc0\x51\x3f\x39\x5d\x90\x26\x7f\x3d\x38\xeb\x95\x21\x18\x4c\xdf\xf9\x24\xd9\x46\x71\xaa\x2e\x4d\x87\x78\x84\x2c\x03\x69\xf2\x91\xd6\x28\x9b\x02\x77\xb6\xd1\xa4\xfd\xe4\xd3\x70\x9d\x73\x35\x57\x4b\x93\x65\xe2\xa4\x63\x54\x61\x3f\x51\xd3\xc5\xf8\x50\x0e\xd3\x33\x78\x05\xf3\xd7\x2c\x98\x9b\x25\x72\x16\x9e\xd2\x25\x4a\xf1\x83\x56\xb8\x8d\x85\x04\x9f\xcf\x5a\xfe\xd9\x97\xc2\xee\x37\x27\xc7\xef\xfc\x1b\x00\x00\xff\xff\x43\xb1\xa7\x90\x12\x03\x00\x00")

func templatesCat1_authorXmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesCat1_authorXml,
		"templates/cat1/_author.xml",
	)
}

func templatesCat1_authorXml() (*asset, error) {
	bytes, err := templatesCat1_authorXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cat1/_author.xml", size: 786, mode: os.FileMode(420), modTime: time.Unix(1452002621, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCat1_idXml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb2\xc9\x4c\x51\xa8\xae\xce\x4c\x53\xd0\x0b\xca\xcf\x2f\xa9\xad\x2d\x02\x92\xb6\x4a\xd5\xd5\x50\x2e\x90\x95\x9a\x97\x52\x5b\xab\x90\x5a\x51\x92\x9a\x57\x9c\x99\x9f\x07\x96\x74\x85\xf1\x80\x2a\x14\xf4\xed\xb8\x00\x01\x00\x00\xff\xff\xc7\x76\x77\x01\x46\x00\x00\x00")

func templatesCat1_idXmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesCat1_idXml,
		"templates/cat1/_id.xml",
	)
}

func templatesCat1_idXml() (*asset, error) {
	bytes, err := templatesCat1_idXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cat1/_id.xml", size: 70, mode: os.FileMode(420), modTime: time.Unix(1451941428, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCat1_organizationXml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x90\xc1\x6a\xc4\x30\x0c\x44\xef\xfd\x0a\x75\xef\xce\xfe\x80\x59\x28\x3d\xed\x65\x0f\x25\xf7\x22\x62\x35\x08\x12\x39\x6b\x2b\xd0\xd6\xf8\xdf\xeb\xd8\xd0\x76\xc1\x37\x4b\x63\xcd\x3c\xc6\xa6\x34\x8c\x38\xdf\x70\xa5\x9c\x2f\x4f\x00\xf6\xd9\x18\x78\xa3\x2d\x50\x24\xd1\x08\xbb\xf0\x7d\x27\x08\x34\x73\xd4\xf0\x05\x3e\xcc\x28\xfc\x8d\xca\x5e\x60\xbc\xde\xc0\x98\xe3\x2c\xa5\x80\x32\x13\x0c\x57\x17\x73\x2e\x8b\x63\xa5\xb4\x6e\x0b\x2a\xc1\xe9\x9d\xdd\xf0\xb9\x2e\x27\x18\xaa\x98\x12\x89\xab\xaf\x1a\xf7\xea\x45\x91\x25\x82\x14\x0c\x30\x10\x37\x9a\xf8\x83\xa7\xbf\x54\xf1\x5a\x86\xfb\xce\x81\x5c\x0b\xb4\xc7\xdf\x4b\xa1\x6f\xe8\xf6\x5c\xe7\xff\x24\x23\x2d\x34\xf9\xb5\x8b\xa3\x4d\xeb\x33\xfd\x3a\xbc\x38\x57\x6a\x88\xd4\xb5\xc0\x26\xf6\x2c\xec\xf9\xb1\xd5\x9f\x00\x00\x00\xff\xff\xf2\x1b\x72\xb3\x65\x01\x00\x00")

func templatesCat1_organizationXmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesCat1_organizationXml,
		"templates/cat1/_organization.xml",
	)
}

func templatesCat1_organizationXml() (*asset, error) {
	bytes, err := templatesCat1_organizationXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cat1/_organization.xml", size: 357, mode: os.FileMode(420), modTime: time.Unix(1451941929, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCat1_record_targetXml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x56\x4d\x6f\xe2\x3c\x10\xbe\xf7\x57\x58\xb9\xbe\xaa\xf3\xd5\x96\xbc\xab\x14\x89\x66\xfb\x81\x44\xbb\x08\x58\xad\xb4\x37\x17\xbb\x60\x29\xb1\x91\xe3\x54\xed\x46\xfc\xf7\x1d\x27\x01\x9c\x26\x2c\x87\x55\xf7\xd2\xda\x33\x4f\x9e\x99\x67\x32\x33\x24\x56\x6c\x29\x15\x5d\x10\xb5\x62\x7a\x78\x86\x50\xbc\x21\x9a\x33\xa1\x67\x32\x65\xe6\x8e\x50\x59\xf2\x17\x84\x1f\x19\xe5\x4b\x92\xce\x2a\xf8\x53\x91\x3d\x33\xb5\xdd\x56\xfe\x5e\xc4\x28\xcf\xf9\x4a\x58\x18\x60\xe6\x14\xb1\x37\xcd\x44\xce\xa5\xb8\x76\xca\xb2\x9f\xd3\x41\x4a\x4a\xdd\xf5\x1f\x18\x1d\xe4\x0e\xf7\x91\x59\x9a\xb3\xe3\x41\xfc\x20\xbc\xb8\xdc\x31\x4e\x53\xb2\x64\x6b\x99\x52\xa6\xbe\xa9\x15\x11\xfc\x17\x48\x95\xa2\x4d\x27\x68\xc3\xf6\x81\xfa\x6f\x88\x6d\xda\x98\x50\xaa\x50\x91\xb3\x6b\xe7\x61\xea\x0c\x5b\x15\x1c\x81\x8b\xe5\x39\xcb\x2d\x41\x65\xa9\x88\x58\xb1\x7e\xa7\xe5\x9e\x6b\xc5\x98\x6e\xf9\x20\x58\x5e\x59\x9b\x47\x27\x5c\xb0\x21\x94\x75\xbb\x8d\xdd\xae\xa3\x45\x7a\xc8\xb7\x21\x5a\x72\xfd\x6e\x9e\x4d\xe0\xbf\x79\xbe\xba\x9f\xb5\x22\x11\x5d\xb1\xcf\xcd\xa1\x0e\x61\x2c\x36\x66\x23\xc1\x96\x26\x92\x56\xc0\x9f\x7c\x63\x60\x96\xb1\x15\x50\x16\x42\xab\x3a\x66\x7d\x44\x55\xdc\xc6\x7c\xd6\x9f\x6b\xb7\x1f\xba\x42\x03\x2f\x40\x37\x85\x4a\xb9\x58\x69\x29\xd0\x8c\xe2\x3f\x96\xa3\x96\x7e\xc3\xe8\x0b\x34\xe1\x47\xe1\x8d\xec\xc7\x51\x47\xae\x2d\xd6\xf3\x07\xa1\xd7\xaf\x74\xaf\xf3\xfb\xbc\x23\xae\xd5\x36\xae\xe9\x9b\xda\x13\x6b\x96\xc2\x48\x64\x75\x17\xfd\x98\x3a\xe8\x95\xa4\x05\x1c\xc1\xfe\xe5\x3f\xff\x7c\x10\xf9\xe7\xc1\xc0\x3f\x0f\x3d\xcf\x73\x9a\x16\xdc\x8d\xf5\x8e\x3b\x16\x24\xb3\xd3\x58\xf1\x57\x26\x4c\xb1\xef\xb8\xca\xb5\xa9\x74\x6d\x39\x20\x5e\x48\xc6\xd3\xea\x7d\x4c\x48\x8d\x68\x2c\x3b\x46\xd7\xa6\x84\x36\xcf\xb8\xe0\x50\x57\x88\xfb\xca\xee\x41\x09\x53\x46\x3a\x5a\xc2\x9f\x6a\xba\x6b\x9b\x19\x67\x63\x9a\xbf\xe7\x9a\x65\xd7\x4e\x80\xfd\x2b\x1c\x5d\x78\xd8\xc7\xbe\x1f\x46\x51\x88\x2f\xb1\x6f\x43\x9e\x20\x0a\xcc\xce\x64\x80\x46\x3d\x21\x9c\xfd\x2c\xc7\xcf\x5c\xe9\xf5\x82\x67\x6c\x57\x9e\xb2\xd4\x70\x5b\xc8\x84\x92\x3b\xa9\x32\xa2\x11\xbe\x31\x18\x5a\x35\xac\xe3\xb6\x87\x71\x06\x33\x6d\x37\x92\x82\x7b\x5b\x80\x41\x60\x63\x32\x1a\x0e\x0f\x61\x93\x21\x34\x2b\xe5\xf9\x26\x25\xef\x75\xbe\x3b\xb8\xb9\x01\xbc\x79\xb5\x1d\x59\xc9\xd7\x04\x19\x1c\x22\x82\xa2\x5b\xbd\x16\xdc\xf4\xdb\xa9\x0a\x5d\xe1\x20\x8c\x9c\xde\x2d\xb6\x53\xb3\xe7\x42\xb6\x26\x56\x59\xef\x95\x2c\x36\x6d\x69\x7b\xb8\xa5\x0f\xb5\x78\x8e\xa9\xec\x00\xfe\xbd\xd6\x09\x6c\xc4\x82\xac\xfa\xd7\x68\x9f\x13\x2a\x91\x36\xe6\x44\x66\x59\x01\x99\x54\x0b\x7c\xd8\x5e\xa6\x90\x11\x48\xd5\x6c\x4c\x9b\xbd\xdf\xcd\x2e\xc4\x51\x04\x67\x0c\xc7\xc0\x41\xa4\xfa\xc9\x82\x3d\x33\x2a\xf4\x5a\x2a\x50\xd7\x34\xef\x78\x31\x9f\xba\x49\x14\x1e\x74\x1c\x0b\xe1\x63\x23\xd9\xc7\x17\x26\xc6\xff\xe1\xc0\x9c\x2f\xc1\xe6\xe3\xc0\x8c\xc5\xb1\x08\xe3\x87\x5b\x77\x9a\x24\x1d\xfe\x83\x4c\xeb\x6d\x73\x18\x9c\x37\x54\xbd\xe9\x1c\x39\xe3\xdb\xc5\x9d\x83\x3c\x64\x4f\x44\x3d\xdf\x27\x6a\x74\x6a\x13\x9f\x2c\xf1\xa7\x17\xf8\x73\xcb\xdb\x57\x5c\x26\x6c\xcc\x89\x12\xb6\xf7\xbd\xb5\xb0\xf7\x97\xfa\xa3\x2c\x76\xdb\x1f\x6d\xbf\x03\x00\x00\xff\xff\x2c\x82\x07\x54\xc4\x09\x00\x00")

func templatesCat1_record_targetXmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesCat1_record_targetXml,
		"templates/cat1/_record_target.xml",
	)
}

func templatesCat1_record_targetXml() (*asset, error) {
	bytes, err := templatesCat1_record_targetXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cat1/_record_target.xml", size: 2500, mode: os.FileMode(420), modTime: time.Unix(1452009085, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCat1_telecomXml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb2\x29\x49\xcd\x49\x4d\xce\xcf\x55\x28\x2d\x4e\xb5\x55\xaa\xae\xd6\x0b\x2d\x4e\xad\xad\x55\x52\x28\x4b\xcc\x29\x05\x0a\x00\x65\xad\xb4\x81\xa2\x61\x20\x2e\x48\x5c\xdf\x8e\x0b\x10\x00\x00\xff\xff\x58\x0a\x19\xbe\x33\x00\x00\x00")

func templatesCat1_telecomXmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesCat1_telecomXml,
		"templates/cat1/_telecom.xml",
	)
}

func templatesCat1_telecomXml() (*asset, error) {
	bytes, err := templatesCat1_telecomXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cat1/_telecom.xml", size: 51, mode: os.FileMode(420), modTime: time.Unix(1451942457, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCat1Cat1Xml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x58\x59\x6f\xdb\x46\x10\x7e\xf7\xaf\xd8\xf2\xa9\x2d\x20\x52\x97\x6d\xc5\xa0\x15\x30\x96\x52\x0b\xb0\x64\x45\x92\x7b\x3c\x05\x6b\x72\x24\x2d\x42\x2e\x55\x72\x69\x59\x35\xfc\xdf\x3b\xbb\xbc\x96\xd4\x61\xb7\xcd\x63\x03\x03\x61\x66\x67\xbf\xb9\xbe\x99\x59\xc7\xfe\xf8\x1c\xf8\xe4\x09\xa2\x98\x85\xfc\xda\x68\x99\x4d\x83\x00\x77\x43\x8f\xf1\xd5\xb5\x91\x88\x65\xa3\x67\x7c\xec\x9f\xd9\x37\x3e\xe3\xcc\xa5\xfe\x20\x74\x93\x00\xb8\x20\x78\x8d\xc7\x57\xcf\x31\xbb\x36\xd6\x42\x6c\xae\x2c\x6b\xbb\xdd\x9a\xdb\x8e\x19\x46\x2b\xab\xdd\x6c\xb6\xac\xdf\xc7\x77\x73\x77\x0d\x01\x6d\x30\x1e\x0b\xca\x5d\x30\xce\xd2\x6b\x08\x1c\xf1\xab\xb5\x7f\xd9\x40\xe5\xab\xa7\x4e\x2e\xbf\x7a\x0a\xdd\xfa\x99\x85\xb2\xe2\x3c\xf6\x44\x4d\x41\x4a\x8c\xfe\x19\x21\xf6\x0f\x8d\x06\xf9\x32\x1b\x38\xe4\x16\xa8\x07\x11\x69\x34\x94\x38\x02\xea\x07\x37\xa1\x07\x04\x83\x82\x6b\xe3\x61\x6e\x58\xea\x40\xec\x36\x30\xf2\x48\x14\x86\xe2\xda\x68\x9b\xad\x0b\xb3\xd7\x6d\x9a\x2d\xb3\xd5\xea\xf4\x7a\x1d\xfc\xe8\x60\x26\x9e\x05\xf0\x34\x33\xd3\xfb\x9b\xc1\xd7\xdb\x41\x13\xff\x74\x9b\x19\x84\x34\xf9\x30\x27\x33\x69\x22\x37\xbb\x80\x60\xe3\x53\x01\x04\xb1\x33\x17\x44\x26\x3a\x65\xad\x69\xb6\xf1\xa7\x2d\x25\x1a\xb8\x8a\x47\xbb\xfe\x8f\x01\xbb\x0a\x90\x68\x88\x83\x71\xe3\x91\xc6\xe0\x7d\x1f\xec\xb6\x8e\xbd\x58\xb3\x98\xe0\x8f\x58\x03\x59\xf9\xe1\x23\xf5\xfd\x1d\x49\x38\xfb\x33\x01\xc2\x3c\x24\x0d\x5b\x32\xcc\xd0\x32\x8c\x50\x05\xf5\x94\x07\x5e\x4e\xa8\xcc\x3e\xcb\xed\xbe\xbc\x10\x0e\xdb\x19\xe5\x5e\x18\x90\xd7\xd7\x7a\x56\x8a\x7b\xb2\x8e\xaa\xb6\x39\x82\x5b\x16\xfb\xfc\xbc\xd5\x6b\x37\x90\xd2\xf2\x9f\xf3\x5d\x8c\xc1\x1d\x0a\xe8\x42\xe6\xa8\x54\x99\xd0\x00\xef\xde\xdd\x8f\x26\x37\x06\xf1\x58\x8c\xf9\xd8\xa5\xb2\x2f\x09\xf5\x99\xd8\x91\x31\xd0\x38\x89\x00\x2b\xbf\x09\x23\x91\x13\x8a\x09\x1f\xfa\xca\xb9\x11\x77\x65\xc0\x6e\xae\x61\x5b\xe9\xe1\xa1\x4c\x15\x81\xb8\x48\x55\x81\x5c\x23\x82\x05\x45\x30\xb0\x5c\x82\x2b\xd8\x13\x2c\xa4\xf0\x89\xfa\x09\xa8\xd4\x48\x9d\x49\xb8\x2d\x13\xe3\x86\x7c\x99\x26\x59\xb9\xa8\x31\x7e\xf2\x56\xf8\xe7\x66\xfb\x3c\x43\xf1\x29\x5f\x25\x74\x05\xda\x75\xe0\x5a\xea\x23\x15\x0e\xb2\x67\x83\xae\x96\x55\x23\xe4\xe5\x25\x27\x0e\x31\xbe\x46\xe0\x86\x91\xf7\x55\xd0\x68\x05\xc2\xc4\xd6\x35\x88\x39\x53\xb2\xd7\xd7\xb3\x4c\x9d\x2d\x89\x99\xb6\x0c\xca\x52\x51\x84\xc6\x21\x97\x9a\x4e\x22\xd6\x61\x14\x67\xa7\x35\x0b\x54\x1d\x66\xd0\x05\x00\x70\x2f\xfb\x96\xbe\xce\x6f\x9d\xbb\x3b\xb2\xa6\x4f\x40\x5a\xa6\xf9\x33\xc9\xee\x90\xb1\xf3\x07\x79\xc4\xbc\xc3\x13\xc3\x02\x21\x19\x37\x38\xfd\x42\x6e\x66\x76\x16\x58\x93\x54\x95\x84\x4b\x55\xa1\x1b\x9d\x6e\x8c\xa7\xe4\x85\x67\x8a\xde\x80\xac\x22\xcd\xb1\xa8\x90\xdf\x54\x50\x12\x27\x8f\x01\x8b\xe5\xe4\xc0\xd9\x8a\x0c\x8e\xac\x08\x56\x2c\x16\xd1\xce\x54\x29\x53\xb6\x32\x2a\x60\xa2\x93\x58\xe0\xc4\xa5\xfc\xb0\xc5\x94\x27\x31\x32\x90\xd0\xf4\xdb\x87\x15\xf5\x95\x97\xb2\xe0\x2e\x15\xe8\x6c\xe6\x98\x42\xce\x9d\xc3\xe6\x91\x25\x8b\x20\x46\xbd\xf4\x6a\x5a\x41\x9c\xee\x18\xf9\x8a\x72\xf6\x97\xe2\x9c\x59\x14\xd2\x2e\x53\x57\x88\x0a\xff\xfa\x59\x8e\x6c\x8a\xb1\xad\x38\x78\x37\xf5\x93\x5a\x9d\x2a\x36\xd2\x6a\x65\xe5\x2d\x6e\x9a\xf7\x9a\x4e\x51\x6d\xdb\x3a\x62\xc2\xb6\x34\x6f\xaa\x69\x3c\x94\x95\x23\x09\xc5\x0a\x61\x0a\x30\x43\x69\xed\xc9\x76\x1d\x2a\xb1\x90\xda\x99\x0b\x2a\xe1\x7a\x00\x79\xf6\xcb\x72\xd5\xc8\x60\xa6\x8d\x0d\x3e\x28\x3b\x01\xea\x49\xa6\x65\xf9\x3f\x9d\x63\xe5\xbc\xa3\xfb\x5e\x24\x7b\x5f\x5b\x4d\x1b\x7d\x1e\xe8\x4d\x53\x00\x98\x72\x66\xe4\x03\xe2\x38\x92\x4c\x33\x15\x38\xce\xb4\xa6\x9f\x6b\x97\xf2\x42\x0c\x11\x57\xec\xca\x42\x6b\x68\xa3\x81\x06\x78\xb8\x95\x4b\xaf\x46\x5e\xd9\xd4\x7b\x84\x61\x5e\xb5\xa9\xeb\x8d\xfd\x36\xbc\xe3\x79\x98\xef\x18\x4e\x18\xa1\xa9\xca\x7f\xb5\xb4\xc0\x42\xbb\x61\x70\xc2\x90\x48\x35\xde\x36\x54\x24\x79\xaa\xf8\xd8\xd7\x00\x6d\x8e\x3c\xd4\x05\x52\xb6\xc2\x8d\xc0\xfb\xc7\xea\x9e\x82\x98\x9f\x59\x14\x8b\xd7\x57\xdb\x4a\xb5\x6b\x10\x4b\x1a\x30\x7f\xf7\x16\xc6\x1d\x4d\x21\x32\x6d\xdd\x2f\xab\xe2\x58\xd9\xb0\xf5\x10\xde\x39\x10\xaa\xe6\xdf\x18\x0a\x3a\x17\x6d\xeb\x50\xef\x9c\x49\xc3\xd8\x8a\x31\x90\xec\xbe\x9d\x4e\xf5\xec\x92\x38\xbd\x4f\xb5\x92\x38\xda\xb5\x8c\xf5\xf8\x48\xd1\x9e\x86\x37\x3b\xd9\xe1\xb1\x71\xfc\xc1\xf4\xc1\xc4\x05\xab\xf7\x9c\x04\x99\x4c\x47\xba\xa8\x8a\xf9\x99\x7e\x03\x54\x38\x8e\xd9\x35\x2f\xf4\x1e\x45\x46\x6b\x9d\x89\x8b\x06\x40\x64\x9d\x70\xc7\x38\xf4\xdb\xcd\x36\xf9\x94\x44\xf8\x8a\x5f\x09\x9c\x64\x33\xcf\xb4\xad\x7d\xad\x12\xc1\x95\xe9\xfd\x04\x1e\x3e\xd6\x3c\x1c\xb9\xd5\xc6\xc7\xd7\xbc\x80\xfe\xd8\x91\x10\xf2\xab\x3c\xd9\x84\x28\xf1\xe5\x20\xe9\x37\x5b\x97\x9d\xa6\x6d\x69\x12\x0d\x3d\x4c\x38\xee\xc2\xfe\xc3\x1c\xb1\xb3\xef\xb2\xc6\x5a\x2c\x76\xd6\x41\x24\x89\xb1\x4e\xbf\x4d\x8d\xbc\x64\x28\xbf\xfa\xf1\xb2\xd7\xfa\xa9\x7d\xd9\x6a\x74\xf0\x51\x7e\x60\x60\xa5\x85\xc3\x88\x07\x6a\x3d\x6b\xf6\x03\xca\x93\x25\x75\xe5\xd0\x8b\xc6\xe8\x9a\x2f\x9f\x77\xfd\xac\x8e\xb6\x75\xf0\x98\xe8\x09\x08\x97\x62\x4b\x23\xa8\x5e\xd3\xa5\xa4\xbf\xc7\xd9\x9a\x3b\x24\x67\xef\x3e\xcf\x50\x56\x7e\xd7\x96\xef\xf1\xd5\x6b\x17\x9b\x5e\x3b\xd4\xfb\x48\x0b\x80\x9d\x78\xdd\x2b\xb2\x6a\xba\x5c\x0b\x12\x7f\xbd\xc1\x9d\x36\x00\xf7\x5b\xad\xfd\xff\x55\xa5\xf6\x88\xfb\x3d\xa8\xfb\x06\x79\x4f\xd1\xf7\xdd\x04\x3e\x4d\xe1\x3d\x12\x5b\xef\xab\xcc\x91\x37\x4f\xe5\xc5\x73\xe2\xa5\xf0\x8e\x91\x76\x72\xd5\x1f\x59\xf4\x25\x57\x1e\xdd\x66\x8b\x9e\x7b\x58\x45\xda\xe9\x36\xba\xed\xde\x45\xa3\xd7\x76\xdd\x46\xb7\x03\x8f\xcd\xae\xfb\xe1\xb2\x4d\x2f\xff\x9f\x49\xa7\x67\x52\x7d\x39\xee\x6f\xf7\x6c\xb7\xdf\x02\x8f\x76\x87\x56\x77\xbe\xb8\xe7\x80\x27\xfb\x8b\xb9\xd2\x97\xc7\x96\xb2\x3e\x2a\xbe\xf3\x84\xa8\xce\x85\x0a\xf5\x4f\x31\xbe\xe4\xdc\xe1\x75\x5e\x3e\x99\xf2\x5f\x45\xa7\xb3\xfb\x5f\x47\x83\xe1\x6c\x4e\x66\xc3\x09\xfe\x4d\x6e\x87\xb3\x61\xfe\xcb\x15\x56\x33\xd8\x84\x1c\x01\x72\xe6\x8b\x28\x51\x03\xdd\xfb\x14\x7a\x3b\x7d\x0f\x8f\x87\xce\xfc\x61\x36\xac\xc0\x54\x37\xf5\x6c\x38\xbd\x9f\x2d\x46\x93\x5f\xc8\xd4\x99\x39\xe3\x13\x9a\x53\x67\x31\x1a\x4e\x16\x64\xe0\x2c\x9c\x4c\x6b\x5e\x51\x53\x04\xaf\x39\x22\xe9\x56\x38\x7b\x66\x5b\xf5\xff\x6a\xeb\x9f\xfd\x1d\x00\x00\xff\xff\xc7\x05\x1e\xb8\xa5\x13\x00\x00")

func templatesCat1Cat1XmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesCat1Cat1Xml,
		"templates/cat1/cat1.xml",
	)
}

func templatesCat1Cat1Xml() (*asset, error) {
	bytes, err := templatesCat1Cat1XmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cat1/cat1.xml", size: 5029, mode: os.FileMode(420), modTime: time.Unix(1452002621, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/cat1/_address.xml": templatesCat1_addressXml,
	"templates/cat1/_author.xml": templatesCat1_authorXml,
	"templates/cat1/_id.xml": templatesCat1_idXml,
	"templates/cat1/_organization.xml": templatesCat1_organizationXml,
	"templates/cat1/_record_target.xml": templatesCat1_record_targetXml,
	"templates/cat1/_telecom.xml": templatesCat1_telecomXml,
	"templates/cat1/cat1.xml": templatesCat1Cat1Xml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"cat1": &bintree{nil, map[string]*bintree{
			"_address.xml": &bintree{templatesCat1_addressXml, map[string]*bintree{}},
			"_author.xml": &bintree{templatesCat1_authorXml, map[string]*bintree{}},
			"_id.xml": &bintree{templatesCat1_idXml, map[string]*bintree{}},
			"_organization.xml": &bintree{templatesCat1_organizationXml, map[string]*bintree{}},
			"_record_target.xml": &bintree{templatesCat1_record_targetXml, map[string]*bintree{}},
			"_telecom.xml": &bintree{templatesCat1_telecomXml, map[string]*bintree{}},
			"cat1.xml": &bintree{templatesCat1Cat1Xml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

